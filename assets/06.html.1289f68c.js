import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";import{r as s,o as i,c as h,a as e,b as n,F as c,d as a,e as t}from"./app.3b4d192a.js";var l="/saf-training/assets/runner.5ef849d1.png";const d={},u=a(`<h2 id="_6-how-to-run-inspec" tabindex="-1"><a class="header-anchor" href="#_6-how-to-run-inspec" aria-hidden="true">#</a> 6. How to Run InSpec</h2><h3 id="_6-1-requirements" tabindex="-1"><a class="header-anchor" href="#_6-1-requirements" aria-hidden="true">#</a> 6.1 Requirements</h3><p>To run InSpec, you must have:</p><ol><li><strong>InSpec</strong> - you must have InSpec downloaded on whatever machine is running the scans. This does not have to be the same machine that is being tested! <em>(We will run InSpec from the GitHub codespaces lab environment. Inspec is already downloaded in the GitHub codespaces lab environment after running the <code>./lab-setup.sh</code> script)</em> Check out the <a href="../../installation">Installation Tab</a> for more information on installing InSpec in a different environment.</li><li><strong>A Target</strong> - you have to have something to test! <em>In the GitHub codespaces in the lab environment, we have two Docker containers running to test.</em></li><li><strong>An InSpec Profile</strong> - you have to have the tests themselves! This is the code itself that will be run with all of the controls, or tests, against the target. You may have this code stored locally on your runner machine, or you may get it from GitHub if your system has access to the internet. We will look at both of those examples.</li></ol><h3 id="_6-2-the-inspec-command-formula" tabindex="-1"><a class="header-anchor" href="#_6-2-the-inspec-command-formula" aria-hidden="true">#</a> 6.2 The InSpec Command Formula</h3><p>You run InSpec from the command line. There are many different options for this command, but let&#39;s break down the simple formula based on the requirements above.</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>inspec exec WHERE_IS_THE_PROFILE -t WHAT_IS_THE_TARGET --more-flags EXTRA_STUFF --reporter WHAT_SHOULD_INSPEC_DO_WITH_THE_RESULTS
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="start-with-inspec-exec" tabindex="-1"><a class="header-anchor" href="#start-with-inspec-exec" aria-hidden="true">#</a> Start with inspec exec</h4><p>You need to start with <code>inspec exec</code> so that your terminal knows what it is trying to do in the first place.</p><h4 id="where-is-the-profile" tabindex="-1"><a class="header-anchor" href="#where-is-the-profile" aria-hidden="true">#</a> WHERE_IS_THE_PROFILE</h4><p>Then, you can give the location of the InSpec profile, in other words, the code for the tests themselves. If the InSpec profile is stored locally, you can write a path to that file location, such as <code>/root/path/to/InSpecProfiles/nginx-profile</code>. If you are hoping to directly access the profile from GitHub, you can enter the url of the GitHub profile, such as <code>https://github.com/mitre/nginx-stigready-baseline</code>.</p><h4 id="what-is-the-target" tabindex="-1"><a class="header-anchor" href="#what-is-the-target" aria-hidden="true">#</a> WHAT_IS_THE_TARGET</h4><p>Next, you need to tell your computer what the target is. You add this information after the <code>-t</code> flag. You could test against your local machine (which is less common), you could test a Virtual Machine, you could test a Docker container, or more. You could connect to that machine via SSH, WinRM, or more. We will talk more about these options later.</p><h4 id="extra-stuff" tabindex="-1"><a class="header-anchor" href="#extra-stuff" aria-hidden="true">#</a> EXTRA_STUFF</h4>`,14),p=t("There are MANY more options that you can specify when running the InSpec command. The next most common one is specifying inputs for your profile, for example "),m=e("code",null,"--input-file /path/to/inputs.yml",-1),_=t(" where you can add inputs that tailor the profile to your environmnent's needs. You can find more information on inputs in the "),f={href:"/courses/user/07",target:"_blank",rel:"noopener noreferrer"},y=t("Tailoring Inputs"),g=t(" section."),b=e("h4",{id:"what-should-inspec-do-with-the-results",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#what-should-inspec-do-with-the-results","aria-hidden":"true"},"#"),t(" WHAT_SHOULD_INSPEC_DO_WITH_THE_RESULTS")],-1),w=e("p",null,[t("And of course you probably want to see the results. You can specify where those results are displayed or saved based on what you enter after the "),e("code",null,"--reporter"),t(" flag at the end of your command. For example, the following would print the results on the command line and save it to a file (by creating or overwriting) the file at /path/to/results.json: "),e("code",null,"--reporter cli json:/path/to/results.json"),t(". If you do not add this information, the command will default to providing results on the command line, but it will not save those into a file unless you specify the "),e("code",null,"--reporter"),t(" flag like the example.")],-1),v=t("Each profile's README should give an example of running the InSpec command for that profile, however, you can always reference the complete documentation on the InSpec command options "),x={href:"https://docs.chef.io/inspec/cli/",target:"_blank",rel:"noopener noreferrer"},I=t("here"),S=t("."),T=a('<details class="custom-block details"><summary>Advanced Examples</summary><h3 id="containers-docker-transport" tabindex="-1"><a class="header-anchor" href="#containers-docker-transport" aria-hidden="true">#</a> Containers (docker transport)</h3><p><code>inspec exec https://github.com/mitre/nginx-stigready-baseline -t docker://instance_id --input-file &lt;path_to_your_input_file/name_of_your_input_file.yml&gt; --reporter json:&lt;path_to_your_output_file/name_of_your_output_file.json&gt; </code></p><h3 id="ssh-transport" tabindex="-1"><a class="header-anchor" href="#ssh-transport" aria-hidden="true">#</a> SSH Transport</h3><p><code>inspec exec https://github.com/mitre/nginx-stigready-baseline -t ssh://Username:Password@IP --input-file &lt;path_to_your_input_file/name_of_your_input_file.yml&gt; --reporter json:&lt;path_to_your_output_file/name_of_your_output_file.json&gt; </code></p></details><h3 id="_6-3-how-to-deploy-inspec" tabindex="-1"><a class="header-anchor" href="#_6-3-how-to-deploy-inspec" aria-hidden="true">#</a> 6.3 How to Deploy InSpec</h3>',2),E=t(`It is intended and recommended that InSpec be installed on a "runner" host (such as a DevOps orchestration server, an administrative management system, or a developer's workstation/laptop) and run against the target remotely. However, InSpec may be deployed in `),H={href:"https://saf.mitre.org/#/faq#runners",target:"_blank",rel:"noopener noreferrer"},k=t("various ways"),A=t(" depending on the needs of the user:"),R=e("p",null,[e("img",{src:l,alt:"Alt text",loading:"lazy"})],-1);function W(F,D){const o=s("ExternalLinkIcon");return i(),h(c,null,[u,e("p",null,[p,m,_,e("a",f,[y,n(o)]),g]),b,w,e("p",null,[v,e("a",x,[I,n(o)]),S]),T,e("p",null,[E,e("a",H,[k,n(o)]),A]),R],64)}var L=r(d,[["render",W],["__file","06.html.vue"]]);export{L as default};
