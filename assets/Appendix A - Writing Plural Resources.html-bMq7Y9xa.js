import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,o as n}from"./app-Cw6QY_M_.js";const l={};function t(h,s){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h2 id="plural-resources" tabindex="-1"><a class="header-anchor" href="#plural-resources"><span>Plural Resources</span></a></h2><p>You might have noticed that many InSpec resources have a &quot;plural&quot; version. For example, <code>user</code> has a <code>users</code> counterpart, and <code>package</code> has <code>packages</code>.</p><p>Plural resources examine platform objects in bulk.<br> For example,</p><ul><li>sorting through which packages are installed on a system, or</li><li>which virtual machines are on a cloud provider.</li><li>all processes running more than an hour, or all VMs on a particular subnet.</li></ul><p>Plural resources usually include functions to query the set of objects it represents by an attribute, like so:</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe users.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">uid</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  it { should eq [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;root&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;uids&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should eq [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1234</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;gids&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should eq [</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1234</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This test queries <strong>all</strong> users to confirm that the only one with a uid of zero is the root user.</p><p>Plural InSpec resources are created by leveraging Ruby&#39;s FilterTable module to capture system data. Let&#39;s dig into how FilterTable works so that you can write your own plural resources.</p><h3 id="using-filtertable-to-write-a-plural-resource" tabindex="-1"><a class="header-anchor" href="#using-filtertable-to-write-a-plural-resource"><span>Using FilterTable to write a Plural Resource</span></a></h3><p>FilterTable is intended to help you author plural resources with <strong>stucture data</strong>. You declare a number of columns of data, attach them to a FilterTable object, and then write methods that the FilterTable can call to populate those columns. You can also define custom matchers that make sense for whatever data you are modeling (to go alongside the standard InSpec matchers like <code>be_in</code>,<code>include</code>, and <code>cmp</code>). You wind up with a queryable structure:</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> etc_hosts.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#&lt;struct  ip_address=&quot;127.0.0.1&quot;, primary_name=&quot;localhost&quot;, all_host_names=[&quot;localhost&quot;, &quot;localhost.localdomain&quot;, &quot;localhost4&quot;, &quot;localhost4.localdomain4&quot;]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #&lt;struct  ip_address=&quot;::1&quot;, primary_name=&quot;localhost6&quot;, all_host_names=[&quot;localhost6&quot;, &quot;localhost6.localdomain6&quot;]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #&lt;struct  ip_address=&quot;127.0.0.1&quot;, primary_name=&quot;test1.org&quot;, all_host_names=[&quot;test1.org&quot;]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #&lt;struct  ip_address=&quot;127.0.0.1&quot;, primary_name=&quot;test2.org&quot;, all_host_names=[&quot;test2.org&quot;]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #&lt;struct  ip_address=&quot;127.0.0.1&quot;, primary_name=&quot;test3.org&quot;, all_host_names=[&quot;test3.org&quot;]&gt;,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> #&lt;struct  ip_address=&quot;127.0.0.1&quot;, primary_name=&quot;test4.org&quot;, all_host_names=[&quot;test4.org&quot;]&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="may-i-have-multiple-filtertable-installations-on-a-class" tabindex="-1"><a class="header-anchor" href="#may-i-have-multiple-filtertable-installations-on-a-class"><span>May I have multiple FilterTable installations on a class?</span></a></h4><p>In theory, yes - that would be used to implement different data fetching / caching strategies. It is a very advanced usage, and no core resources currently do this, as far as we know.</p><h3 id="filtertable-hands-on" tabindex="-1"><a class="header-anchor" href="#filtertable-hands-on"><span>FilterTable Hands-On</span></a></h3><p>Let&#39;s take a look at the structure of a resource that leverages FilterTable. We will write a dummy resource that models a small group of students. Our resource will describe each student&#39;s name, grade, and the toys they have. Usually, a resource will include some methods that reach out the system under test to populate the FilterTable with real system data, but for now we&#39;re just going to hard-code in some dummy data.</p><ul><li>Create new profile</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>inspec init profile filtertable-test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Place following file as custom resource in <code>libraries</code> directory as <code>filter.rb</code>.</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You can also use <code>inspec init resource &lt;your-resource-name&gt;</code> to create the template for your resource. When following the prompts, you can choose &quot;plural&quot; to create the template for a plural resource.</p></div><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">require </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;inspec/utils/filter&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Filtertable</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;"> &lt; </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    name </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;filtertable&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    supports </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">platform</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;linux&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    filter_table</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> FilterTable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">create</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">field</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">field</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_column</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">field</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_matcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">has_bike?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flatten</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">include?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_matcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">has_middle_schooler?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">grade</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">uniq</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">any?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">grade</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> grade </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">bike_count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toys</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">flatten</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">include?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">middle_schooler_count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{ grade </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">install_filter_methods_on_resource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">fetch_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fetch_data</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # This method should return an array of hashes - the raw data.  We&#39;ll hardcode it here.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          { </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Sarah&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;car&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;train&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          { </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;John&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;top&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          { </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Donny&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,  </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;train&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;nintento&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">          { </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Susan&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">grade</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">toys</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;car&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;gameboy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now we&#39;ve got a nice blob of code in a resource file. Let&#39;s load this resource in the InSpec shell and see what we can do with it.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>inspec shell --depends /path/to/profile/root/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="fetching-data" tabindex="-1"><a class="header-anchor" href="#fetching-data"><span>Fetching Data</span></a></h4><p>FilterTables organize their data into columns. Your resource will declare a number of columns using the <code>register_column</code> method.</p><p>Once you declare the columns that you want in your FilterTable (<code>name</code>, <code>grade</code>, and <code>toys</code> in our example), you need to insert some data into them using the <code>install_filter_methods_on_resource</code> method. That method takes two args -- <code>self</code> and a data structure that is an array of hashes. The array of hashes will be matched up to the columns you defined using the hashes&#39; keys. For our example we hard-coded this data structure, which is returned by the <code>fetch_data</code> method.</p><p>As we mentioned earlier, a real InSpec resource will include methods that will populate the resource with real system data. Take a look at the <a href="https://github.com/inspec/inspec/blob/63a5fd26a6925b1570ee80e2953d259b58c3012e/lib/inspec/resources/firewalld.rb" target="_blank" rel="noopener noreferrer">Firewalld resource</a> for an example of a resource that does this -- note the resource is ultimately invoking a shell command (<code>firewall-ctl</code>) to populate its FilterTable. There are plenty of other InSpec resources using FilterTable that you can find in the source code if you are interested in more examples.</p><h4 id="custom-matcher-examples" tabindex="-1"><a class="header-anchor" href="#custom-matcher-examples"><span>Custom Matcher Examples</span></a></h4><p>After we define our FilterTable&#39;s columns, we can also define custom matchers just like we do in singluar resources using <code>register_custom_matcher</code>. That function takes a block as an argument that defines a boolean expression that tells InSpec when that matcher should return <code>true</code>. Note that the matcher&#39;s logic can get pretty complicated -- that&#39;s why we&#39;re shoving all of it into a resource so we can avoid having to write complicated tests.</p><ul><li><code>has_bike?</code></li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe filtertable.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Donny&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  it { should have_bike }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specified)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  filtertable with name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Donny&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ×  should have bike</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     expected </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">#has_bike? to return true, got false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> Summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successful, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> failure, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> skipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe filtertable.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">( </span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">name</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Sarah&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  it { should have_bike }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specified)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  filtertable with name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;Sarah&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ✔  should have bike</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> Summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successful, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> failures, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> skipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In the simplest examples, we filter the table down to a single student using <code>where</code> (more on <code>where</code> in a minute) and invoke a matcher that checks if that student has a <code>bike</code> in their list of toys. We can write matchers to have whatever logic we like. For example, while <code>has_bike</code> checks if <em>all</em> of the students in the table under test have a bike, while <code>has_middle_schooler</code> checks if <em>any</em> student in the table under test is in the 7th grade or higher.</p><ul><li><code>has_middle_schooler?</code></li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe filtertable.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=~</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /Sarah|John/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  it { should have_middle_schooler }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specified)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> ID</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  filtertable with name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=~</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /Sarah|John/</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ✔  is expected to have middle schooler</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> Summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successful, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> failures, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> skipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="custom-property" tabindex="-1"><a class="header-anchor" href="#custom-property"><span>Custom Property</span></a></h4><p>We can also declare custom properties for our resource, using whatever logic we like, just like we did for our custom matchers. Properties can be referred to with <code>its</code> syntax in an InSpec test.</p><ul><li><code>bike_count</code></li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe filtertable </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;bike_count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should eq </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }  </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specified)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> ID</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  filtertable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ✔  bike_count is expected to eq </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> Summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successful, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> failures, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> skipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>middle_schooler_count</code></li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">describe filtertable </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">   its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;middle_schooler_count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should eq </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }     </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">end</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Profile</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   inspec</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shell</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">Version</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   (</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> specified)</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> ID</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  filtertable</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     ×  middle_schooler_count is expected to eq </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">     expected</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">          got</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">     (compared </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">using</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">Test</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;"> Summary</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> successful, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> failure, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> skipped</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="suggested-activity" tabindex="-1"><a class="header-anchor" href="#suggested-activity"><span>Suggested activity</span></a></h4><p>To get a better feel for how FilterTable works, we suggest you add a few extra features to the sample given above.</p><ul><li><strong>Add a field to the data array and reflect the change in filter table</strong></li><li><strong>Add a custom matcher</strong></li><li><strong>Add a custom property</strong></li></ul><p>Then write some tests to see how your new matchers and properties work.</p><h3 id="predefined-methods-for-filtertable" tabindex="-1"><a class="header-anchor" href="#predefined-methods-for-filtertable"><span>Predefined Methods for FilterTable</span></a></h3><p>When you create a new FilterTable, these methods are installed automatically: <code>where</code>, <code>entries</code>, <code>raw_data</code>, <code>count</code>, and <code>exist?</code>. Each is very useful both for writing tests in and of themselves and for creating custom matchers and properties inside the resource code.</p><h4 id="the-where-method" tabindex="-1"><a class="header-anchor" href="#the-where-method"><span>The <code>where</code> method</span></a></h4><p>You may have already noticed that a bunch of our example tests are using the <code>where</code> method on the FilterTable object. This method returns a new FilterTable object created from the rows of the original table that match the query provided to <code>where</code>. If you have experience with relational databases, think of it like the <code>WHERE</code> clause in a SQL query. This method is extremely flexible; we give some examples below.</p><ul><li>If you call <code>where</code> as a method with no block and passing hash params, with keys you know are in the raw data, it will fetch the raw data, then filter row-wise and return the resulting Table.</li><li>Multiple criteria are joined with a logical AND.</li><li>The filtering is fancy, not just straight equality.</li></ul><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;red&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Regexes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /^re/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # It eventually falls out to &#39;===&#39; comparison</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Here, range membership 1..2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">thing_id</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">..</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # irregular rows are supported</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Only one row has the :tackiness key, with value &#39;very&#39;.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">tackiness</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;very&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="where-method-with-blocks" tabindex="-1"><a class="header-anchor" href="#where-method-with-blocks"><span><code>where</code> method with blocks</span></a></h5><p>You can also call the <code>where</code> method with a block. The block is executed row-wise. If it returns truthy, the row is included in the results. Each field declared with the <code>register_custom_property</code> configuration method is available as a data accessor.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # You can have any logic you want in the block</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # You can access any fields you declared using \`register_column\`</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { thing_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="chaining-where-calls-and-tables-without-re-fetching-raw-data" tabindex="-1"><a class="header-anchor" href="#chaining-where-calls-and-tables-without-re-fetching-raw-data"><span>Chaining <code>where</code> calls and Tables without re-fetching raw data</span></a></h5><p>The first time <code>where</code> is called, the data fetcher method is called. <code>where</code> performs filtration on the raw data table. It then constructs a new <code>FilterTable::Table</code>, directly passing in the filtered raw data; this is then the return value from <code>where</code>.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # This only calls fetch_data once</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { thing_id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Some other methods return a Table object, and they may be chained without a re-fetch as well.</p><h4 id="the-entries-method" tabindex="-1"><a class="header-anchor" href="#the-entries-method"><span>The <code>entries</code> method</span></a></h4><p>The other <code>register_filter_method</code> call enables a pre-defined method, <code>entries</code>. <code>entries</code> is much simpler than <code>where</code> - in fact, its behavior is unrelated. It returns an encapsulated version of the raw data - a plain array, containing Structs as row-entries. Each struct has an attribute for each time you called <code>register_column</code>.</p><p>Importantly, note that the return value of <code>entries</code> is not the resource, nor the Table - in other words, you cannot chain it. However, you can call <code>entries</code> on any Table.</p><p>If you call <code>entries</code> without chaining it after <code>where</code>, calling entries will trigger the call to the data fetching method.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Access the entries array</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # This is Array#count, not the resource&#39;s \`count\` method</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Access the entries array after chaining off of where</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # This is Array#count, not the resource&#39;s or table&#39;s \`count\` method</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # You can access the struct elements as a method, as a hash keyed on symbol, or as a hash keyed on string</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">color</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    it { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    it { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;color&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    it { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-exist-matcher" tabindex="-1"><a class="header-anchor" href="#the-exist-matcher"><span>The <code>exist?</code> matcher</span></a></h4><p>This <code>register_custom_matcher</code> call:</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">filter_table_config.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_matcher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">exist?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">empty?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>causes a new method to be defined on both the resource class and the Table class. The body of the method is taken from the block that is provided. When the method it called, it will receive the <code>FilterTable::Table</code> instance as its first parameter. (It may also accept a second param, but that doesn&#39;t make sense for this method - see thing_ids).</p><p>As when you are implementing matchers on a singular resource, the only thing that distinguishes this as a matcher is the fact that it ends in <code>?</code>.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Bare call on the matcher (called as a method on the resource)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    it { should exist }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Chained on where (called as a method on the Table)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    it { should exist }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-count-property" tabindex="-1"><a class="header-anchor" href="#the-count-property"><span>The <code>count</code> property</span></a></h4><p>This <code>register_custom_property</code> call:</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">filter_table_config.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">register_custom_property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filter_table</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> filter_table.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entries</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>causes a new method to be defined on both the resource class and the Table class. As with <code>exists?</code>, the body is taken from the block.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Bare call on the property (called as a method on the resource)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # Chained on where (called as a method on the Table)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  describe things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">red</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    its</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;count&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { should cmp </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="the-raw-data-method" tabindex="-1"><a class="header-anchor" href="#the-raw-data-method"><span>The <code>raw_data</code> method</span></a></h4><p>Unlike <code>entries</code>, which wraps each row in a Struct and omits undeclared fields, <code>raw_data</code> simply returns the actual raw data array-of-hashes. It is not <code>dup</code>&#39;d. People <em>definitely</em> use this out in the wild, even though it returns a rougher data structure.</p><div class="language-ruby line-numbers-mode" data-highlighter="shiki" data-ext="ruby" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ruby"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  tacky_things</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">color</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">blue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">raw_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">row</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> row[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">tackiness</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  tacky_things.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">row</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> row[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">:</span><span style="--shiki-light:#986801;--shiki-dark:#56B6C2;">thing_id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">each</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> do</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> |</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">thing_id</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">|</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # Use to audit a singular Thing</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    describe </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">thing</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(thing_id) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">do</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      it { should_not be_paisley }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    end</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="filtertable-examples" tabindex="-1"><a class="header-anchor" href="#filtertable-examples"><span>FilterTable Examples</span></a></h3><p>FilterTable is a very flexible and powerful class that works well when designing plural resources. As always, if you need to write a plural resource, we encourage you to examine existing resources in the InSpec source code to see how other developers have implemented it. Some good examples include:</p><ul><li><a href="https://github.com/inspec/inspec/blob/63a5fd26a6925b1570ee80e2953d259b58c3012e/lib/inspec/resources/firewalld.rb" target="_blank" rel="noopener noreferrer">FirewallD</a></li><li><a href="https://github.com/inspec/inspec/blob/63a5fd26a6925b1570ee80e2953d259b58c3012e/lib/inspec/resources/users.rb" target="_blank" rel="noopener noreferrer">Users</a></li><li><a href="https://github.com/inspec/inspec/blob/63a5fd26a6925b1570ee80e2953d259b58c3012e/lib/inspec/resources/shadow.rb" target="_blank" rel="noopener noreferrer">Shadow</a></li></ul>`,79)])])}const r=i(l,[["render",t]]),d=JSON.parse('{"path":"/courses/advanced/Appendix%20A%20-%20Writing%20Plural%20Resources.html","title":"Appendix A - Writing Plural Resources","lang":"en-US","frontmatter":{"order":14,"title":"Appendix A - Writing Plural Resources","author":"Aaron Lippold","headerDepth":3,"toc":{"levels":[2,5]},"description":"Plural Resources You might have noticed that many InSpec resources have a \\"plural\\" version. For example, user has a users counterpart, and package has packages. Plural resources...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Appendix A - Writing Plural Resources\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-05T02:43:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Lippold\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/saf-training/saf-training/courses/advanced/Appendix%20A%20-%20Writing%20Plural%20Resources.html"}],["meta",{"property":"og:site_name","content":"MITRE SAF Training"}],["meta",{"property":"og:title","content":"Appendix A - Writing Plural Resources"}],["meta",{"property":"og:description","content":"Plural Resources You might have noticed that many InSpec resources have a \\"plural\\" version. For example, user has a users counterpart, and package has packages. Plural resources..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-05T02:43:39.000Z"}],["meta",{"property":"article:author","content":"Aaron Lippold"}],["meta",{"property":"article:modified_time","content":"2024-12-05T02:43:39.000Z"}]]},"git":{"createdTime":1656449910000,"updatedTime":1733366619000,"contributors":[{"name":"Emily Rodriguez","username":"","email":"ecrodriguez@mm279976-pc.lan","commits":3},{"name":"wdower","username":"wdower","email":"57142072+wdower@users.noreply.github.com","commits":3,"url":"https://github.com/wdower"},{"name":"Will Dower","username":"","email":"wdow95@hotmail.com","commits":1},{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":3},{"name":"Shivani Karikar","username":"","email":"karikarshivani@gmail.com","commits":1},{"name":"Will","username":"Will","email":"will@dower.dev","commits":2,"url":"https://github.com/Will"},{"name":"dependabot[bot]","username":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com","commits":1,"url":"https://github.com/dependabot[bot]"}]},"readingTime":{"minutes":7.43,"words":2229},"filePathRelative":"courses/advanced/Appendix A - Writing Plural Resources.md","autoDesc":true}');export{r as comp,d as data};
