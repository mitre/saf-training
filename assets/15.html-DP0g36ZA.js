import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as t,d as o,r as s,o as r}from"./app-Cw6QY_M_.js";const l={};function c(p,e){const i=s("Mermaid");return r(),a("div",null,[e[0]||(e[0]=t('<h2 id="learning-objectives" tabindex="-1"><a class="header-anchor" href="#learning-objectives"><span>Learning Objectives</span></a></h2><p>By the end of this module, you will be able to:</p><ul><li>Understand the purpose and benefits of Test Kitchen</li><li>Describe the Test Kitchen workflow</li><li>Differentiate between vanilla and hardened configurations</li><li>Execute basic Test Kitchen commands</li></ul><h2 id="what-is-test-kitchen" tabindex="-1"><a class="header-anchor" href="#what-is-test-kitchen"><span>What is Test Kitchen?</span></a></h2><p>Test Kitchen is a powerful testing framework that allows developers to test infrastructure code across different platforms and configurations. Think of it as a laboratory where you can safely experiment with different system configurations without affecting your production environment.</p><h2 id="test-kitchen-workflow" tabindex="-1"><a class="header-anchor" href="#test-kitchen-workflow"><span>Test Kitchen Workflow</span></a></h2><p>The testing process follows four key stages:</p><ol><li><p><strong>Create</strong> üèóÔ∏è</p><ul><li>Spins up a fresh instance of your target platform</li><li>Sets up the basic environment</li></ul></li><li><p><strong>Converge</strong> üîÑ</p><ul><li>Applies your infrastructure code</li><li>Configures the instance according to your specifications</li></ul></li><li><p><strong>Verify</strong> ‚úÖ</p><ul><li>Runs your tests against the instance</li><li>Checks if everything is configured correctly</li></ul></li><li><p><strong>Destroy</strong> üßπ</p><ul><li>Cleans up the test environment</li><li>Removes the instance completely</li></ul></li></ol><h2 id="testing-configurations" tabindex="-1"><a class="header-anchor" href="#testing-configurations"><span>Testing Configurations</span></a></h2><p>We use two main testing configurations:</p><h3 id="vanilla-configuration" tabindex="-1"><a class="header-anchor" href="#vanilla-configuration"><span>Vanilla Configuration</span></a></h3><ul><li>Stock installation with default settings</li><li>No customization or hardening</li><li>Represents &quot;out-of-the-box&quot; state</li><li>Used as a baseline for comparison</li></ul><h3 id="hardened-configuration" tabindex="-1"><a class="header-anchor" href="#hardened-configuration"><span>Hardened Configuration</span></a></h3><ul><li>Implements security best practices</li><li>Follows benchmark recommendations (e.g., RHEL V1R12)</li><li>Represents the target secure state</li><li>Applied during the converge phase</li></ul>',14)),o(i,{code:"eJx1kM1OwzAMgO99Ct92mhACLr2hSWiIy7SVcY4abzUzcZWfIt6epH9rqy2XKPYXf7bX63XmyTPmUKDz8EG+rNDAl9jLieU3S0D2LcEa/MugPQ5LT2LggD7UfQxgU2F5keAB9lhLDk85jLl347xihkKEXUqNmbYG7IMxaCeJQbERc6JzsLj4cFSGmFVX2JSx+6muY7bKajSob0KDIJq7wQ+B/NUyhB1EppfNHTNiUN00YClWx8sFjvS1SdVgX4EM7KhGJrMY5LNmUbqnvMAW6UenRR7QNt3ClrqjYtLKI7yeKc4NRWXRVcJ6LDoSvkJYNd1wq/jqwRyeJy3M6aof9A4+NLFTzj28KeL2V1zVWC4F054eJ4pEp9hLjP0DrNi9iA==",title:"eJwLSS0uUfDOLEnOSM1TCM8vyk7LyS8HAFU8CAI="}),e[1]||(e[1]=t('<h2 id="behind-the-scenes-system-access" tabindex="-1"><a class="header-anchor" href="#behind-the-scenes-system-access"><span>Behind the Scenes: System Access</span></a></h2><p>To enable testing, Test Kitchen makes minimal system modifications:</p><ul><li>Adds SSH private key authentication</li><li>Sets up appropriate access protocols: <ul><li>SSH for Unix/Linux systems</li><li>WinRM for Windows systems</li></ul></li></ul><h2 id="where-do-we-put-it" tabindex="-1"><a class="header-anchor" href="#where-do-we-put-it"><span>Where do we put it?</span></a></h2><p>We put our Test Kitchen code that we use to assess our InSpec code in the same repository. The example that we will be working through for the next few sections will use the <a href="https://github.com/mitre/redhat-enterprise-linux-9-stig-baseline" target="_blank" rel="noopener noreferrer">RHEL 9 InSpec repository</a>.</p>',5))])}const u=n(l,[["render",c]]),m=JSON.parse('{"path":"/courses/profile-dev-test/15.html","title":"15. Understanding Test Kitchen","lang":"en-US","frontmatter":{"order":15,"next":"16.md","title":"15. Understanding Test Kitchen","author":"Aaron Lippold","description":"Learning Objectives By the end of this module, you will be able to: Understand the purpose and benefits of Test Kitchen Describe the Test Kitchen workflow Differentiate between ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"15. Understanding Test Kitchen\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-13T06:04:07.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Lippold\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/saf-training/saf-training/courses/profile-dev-test/15.html"}],["meta",{"property":"og:site_name","content":"MITRE SAF Training"}],["meta",{"property":"og:title","content":"15. Understanding Test Kitchen"}],["meta",{"property":"og:description","content":"Learning Objectives By the end of this module, you will be able to: Understand the purpose and benefits of Test Kitchen Describe the Test Kitchen workflow Differentiate between ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-13T06:04:07.000Z"}],["meta",{"property":"article:author","content":"Aaron Lippold"}],["meta",{"property":"article:modified_time","content":"2024-12-13T06:04:07.000Z"}]]},"git":{"createdTime":1704493101000,"updatedTime":1734069847000,"contributors":[{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":4},{"name":"Amndeep Singh Mann","username":"","email":"amann@mitre.org","commits":1}]},"readingTime":{"minutes":1.22,"words":367},"filePathRelative":"courses/profile-dev-test/15.md","autoDesc":true}');export{u as comp,m as data};
