import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as a,c as r,a as t,b as l,F as p,d as n,e}from"./app.3b4d192a.js";var c="/saf-training/assets/Codespaces_InputFile_NGINX.258d0ad0.png";const u={},d=n('<h2 id="_7-what-are-inputs-and-why-do-i-need-them" tabindex="-1"><a class="header-anchor" href="#_7-what-are-inputs-and-why-do-i-need-them" aria-hidden="true">#</a> 7. What are inputs and why do I need them?</h2><p>Every InSpec profile on the SAF site is written to comply with some security guidance. However, every team&#39;s environment may be just a little bit different. For example, the path to a file may be different in different environments, or the list of permitted users for a certain system may vary with the environment.</p><p>To accomodate for these kinds of differences, InSpec profiles utilize inputs. In the previous section, we ran the InSpec profile on the NGINX component without specifying any inputs. This means that it just used the defaults. Now, let&#39;s review these variables and decide which inputs we want to change for our environment.</p><div class="custom-container tip"><p class="custom-container-title">Best Practice</p><p>It is best practice to always run profiles with inputs so that the profile is properly tailored to your environment!</p></div><h2 id="_7-1-profile-inputs-see-inspec-yml-file" tabindex="-1"><a class="header-anchor" href="#_7-1-profile-inputs-see-inspec-yml-file" aria-hidden="true">#</a> 7.1 Profile Inputs (see <code>inspec.yml</code> file)</h2><p>This profile uses InSpec Inputs to make the tests more flexible. You are able to provide inputs at runtime either via the cli or via YAML files to help the profile work best in your deployment.</p><h4 id="do-not-change-the-inputs-in-the-inspec-yml-file" tabindex="-1"><a class="header-anchor" href="#do-not-change-the-inputs-in-the-inspec-yml-file" aria-hidden="true">#</a> <strong><em>Do not change the inputs in the <code>inspec.yml</code> file</em></strong></h4><p>The <code>inputs</code> configured in the <code>inspec.yml</code> file are <strong>profile definition and defaults for the profile</strong> and not for the user. InSpec provides two ways to adjust the profile&#39;s inputs at run-time that do not require modifiying <code>inspec.yml</code> itself. This is because automated profiles like this one are frequently run from a script, inside a pipeline or some kind of task scheduler. Such automation usually works by running the profile directly from its source (i.e. this repository), which means the runner will not have access to the <code>inspec.yml</code>.</p><p>To tailor the tested values for your deployment or organizationally defined values, <strong><em>you may update the inputs</em></strong>.</p>',9),h=e("More information about InSpec inputs can be found in the "),f={href:"https://docs.chef.io/inspec/inputs/",target:"_blank",rel:"noopener noreferrer"},m=e("InSpec Inputs Documentation"),y=e("."),v=n(`<h2 id="_7-2-using-an-input-file-to-tailor-specifics" tabindex="-1"><a class="header-anchor" href="#_7-2-using-an-input-file-to-tailor-specifics" aria-hidden="true">#</a> 7.2 Using an --input-file to tailor specifics</h2><p>For the NGINX example, we are going to add the following inputs. Make a new file called <code>inputs.yml</code> in your lab environment:</p><ol><li>Right click near the file list on the left side</li><li>Click &quot;New File...&quot;</li><li>Copy the code below into your <code>inputs.yml</code> file.</li></ol><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">key_file_path</span><span class="token punctuation">:</span> /etc/ssl/nginx<span class="token punctuation">-</span>selfsigned.pem
<span class="token key atrule">org_allowed_nginx_version</span><span class="token punctuation">:</span> 1.23.1
<span class="token key atrule">nginx_owner</span><span class="token punctuation">:</span> <span class="token string">&quot;nginx&quot;</span>
<span class="token key atrule">uses_pki</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">sys_admin</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">]</span>
<span class="token key atrule">sys_admin_group</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your codespaces, it should look like this:</p><p><img src="`+c+'" alt="Alt text" loading="lazy"></p><div class="custom-container tip"><p class="custom-container-title">How do I find the values that should be in the input file?</p><p>Start by checking the README on the GitHub repository for that InSpec profile. Most of the profiles have a &quot;Tailoring to Your Environment&quot; section that leads you through what variables are available as inputs.</p><p>To determine the value itself, you should think about the environment, talk to your assessor, and explore the target to see if you can find the necessary information.</p></div><div class="custom-container info"><p class="custom-container-title">What is the difference between tailoring an InSpec profile with inputs vs. overlays?</p><p><strong>Inputs</strong> are meant to tailor the profile while <em>still complying</em> to the guidance document for which the profile is based.</p><p><strong>Overlays</strong> are used in the case that the organization requirements <em>differ</em> from the security guidance. For example, if there are additional controls required or some controls not available for the organization&#39;s requirements.</p></div>',8);function g(k,_){const s=o("ExternalLinkIcon");return a(),r(p,null,[d,t("p",null,[h,t("a",f,[m,l(s)]),y]),v],64)}var I=i(u,[["render",g],["__file","07.html.vue"]]);export{I as default};
