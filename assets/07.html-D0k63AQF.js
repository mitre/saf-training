import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as i,o as r}from"./app-Cw6QY_M_.js";const o={};function n(s,e){return r(),t("div",null,[...e[0]||(e[0]=[i('<h2 id="learning-objectives" tabindex="-1"><a class="header-anchor" href="#learning-objectives"><span>Learning Objectives</span></a></h2><p>By the end of this section, you will:</p><ul><li>Understand the GitHub Flow workflow for repository management</li><li>Compare micro and macro PR approaches</li><li>Learn when to use different PR strategies</li></ul><h2 id="github-flow-overview" tabindex="-1"><a class="header-anchor" href="#github-flow-overview"><span>GitHub Flow Overview</span></a></h2><p>This project uses the <a href="https://docs.github.com/en/get-started/quickstart/github-flow" target="_blank" rel="noopener noreferrer">GitHub Flow</a> model for managing changes. This workflow helps maintain code quality and collaboration through systematic pull requests (PRs).</p><h2 id="understanding-pull-request-strategies" tabindex="-1"><a class="header-anchor" href="#understanding-pull-request-strategies"><span>Understanding Pull Request Strategies</span></a></h2><p>When contributing to a project, you&#39;ll need to choose between two main PR approaches:</p><h3 id="_1-micro-prs-small-frequent-changes" tabindex="-1"><a class="header-anchor" href="#_1-micro-prs-small-frequent-changes"><span>1. Micro PRs (Small, Frequent Changes)</span></a></h3><p><strong>Characteristics:</strong></p><ul><li>Single task or feature per PR</li><li>Usually &lt; 200 lines of code</li><li>Frequent submissions</li></ul><p><strong>Advantages:</strong></p><ul><li><strong>Easier to review:</strong> Small changes are easier for reviewers to understand and provide feedback on.</li><li><strong>Less risk:</strong> If a problem arises, it&#39;s easier to identify and fix because the change is isolated.</li><li><strong>Faster feedback loop:</strong> Frequent PRs mean more opportunities for feedback and improvement.</li></ul><p><strong>Challenges:</strong></p><ul><li><strong>Overhead:</strong> Each PR requires its own review and merge process, which can be time-consuming.</li><li><strong>Context switching:</strong> Frequent changes can disrupt the flow of work, especially if developers have to switch between different tasks.</li></ul><h3 id="_2-macro-prs-large-comprehensive-changes" tabindex="-1"><a class="header-anchor" href="#_2-macro-prs-large-comprehensive-changes"><span>2. Macro PRs (Large, Comprehensive Changes)</span></a></h3><p><strong>Characteristics:</strong></p><ul><li>Multiple related changes</li><li>Larger codebase modifications</li><li>Less frequent submissions</li></ul><p><strong>Advantages:</strong></p><ul><li><strong>Efficiency:</strong> Larger PRs can be more efficient because they require fewer reviews and merges.</li><li><strong>Coherence:</strong> By grouping related changes together, it may be easier to understand how different parts of the codebase interact.</li></ul><p><strong>Challenges:</strong></p><ul><li><strong>Difficult to review:</strong> Large changes can be overwhelming for reviewers, making it harder to catch issues.</li><li><strong>Higher risk:</strong> If a problem arises, it can be more difficult to identify and fix because it could be anywhere in the large set of changes.</li><li><strong>Delayed feedback:</strong> With fewer PRs, there are fewer opportunities for feedback.</li></ul><h2 id="practical-guidelines" tabindex="-1"><a class="header-anchor" href="#practical-guidelines"><span>Practical Guidelines</span></a></h2><h3 id="when-to-use-micro-prs" tabindex="-1"><a class="header-anchor" href="#when-to-use-micro-prs"><span>When to Use Micro PRs</span></a></h3><ul><li>Bug fixes</li><li>Small feature additions</li><li>Documentation updates</li><li>Performance optimizations</li></ul><h3 id="when-to-use-macro-prs" tabindex="-1"><a class="header-anchor" href="#when-to-use-macro-prs"><span>When to Use Macro PRs</span></a></h3><ul><li>Major version upgrades</li><li>Complex feature implementations</li><li>Architectural changes</li><li>Large-scale refactoring</li></ul><h2 id="update-scenarios" tabindex="-1"><a class="header-anchor" href="#update-scenarios"><span>Update Scenarios</span></a></h2><p>The choice between micro and massive PRs can significantly impact the workflows in our <code>Patch Update</code>, <code>Release Update</code>, and <code>Major Version Update</code>.</p><ul><li><p><strong>Patch and Release Updates:</strong> These updates typically involve minor changes or additions, which can be easily managed with either micro or massive PRs. The choice depends on your team&#39;s preference for review speed and context switching.</p></li><li><p><strong>Major Version or Large Jump Release Updates:</strong> These updates require a thorough review of every single control and requirement. They also necessitate extensive testing, both automated (via the CI/CD testing matrix) and manual. In this scenario, the overhead of managing multiple micro or mini PRs can be substantial. However, the benefit is that it allows for more granular control and review of changes. It&#39;s also easier to isolate and fix issues that arise during testing.</p></li></ul><h2 id="practice-exercise" tabindex="-1"><a class="header-anchor" href="#practice-exercise"><span>Practice Exercise</span></a></h2><p>Consider these scenarios and decide which PR strategy you would use:</p><ol><li>Fixing a typo in documentation</li><li>Implementing a new security control</li><li>Upgrading to a new major version</li></ol><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary"><span>Summary</span></a></h2><ul><li>Choose micro PRs for better review quality and reduced risk</li><li>Use macro PRs for cohesive, large-scale changes</li><li>Consider project context and team preferences</li><li>Balance efficiency with maintainability</li></ul><h2 id="review-questions" tabindex="-1"><a class="header-anchor" href="#review-questions"><span>Review Questions</span></a></h2><ol><li>What are the key differences between micro and macro PRs?</li><li>Which PR strategy would you choose for a critical security patch?</li><li>How does GitHub Flow support different PR strategies?</li></ol><div class="hint-container tip"><p class="hint-container-title">Why not both?</p><p>One approach is to have the small feature branches get merged into a version branch on successful review following the &quot;Micro PR&quot; approach. Then you can do a more holistic review of the macro PR associated with the version branch focusing more on having a consistent coding style, ensuring no duplicate <code>input</code>s got created, identifying InSpec controls that weren&#39;t modified when similar ones were, etc. Once the version branch is approved, it can be merged into the main branch and a release can be cut.</p></div>',37)])])}const h=a(o,[["render",n]]),d=JSON.parse('{"path":"/courses/profile-dev-test/07.html","title":"7. Pull Request Strategies - Choosing Your Approach","lang":"en-US","frontmatter":{"order":7,"next":"08.md","title":"7. Pull Request Strategies - Choosing Your Approach","author":"Aaron Lippold","description":"Learning Objectives By the end of this section, you will: Understand the GitHub Flow workflow for repository management Compare micro and macro PR approaches Learn when to use d...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7. Pull Request Strategies - Choosing Your Approach\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-13T08:07:22.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Lippold\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/saf-training/saf-training/courses/profile-dev-test/07.html"}],["meta",{"property":"og:site_name","content":"MITRE SAF Training"}],["meta",{"property":"og:title","content":"7. Pull Request Strategies - Choosing Your Approach"}],["meta",{"property":"og:description","content":"Learning Objectives By the end of this section, you will: Understand the GitHub Flow workflow for repository management Compare micro and macro PR approaches Learn when to use d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-13T08:07:22.000Z"}],["meta",{"property":"article:author","content":"Aaron Lippold"}],["meta",{"property":"article:modified_time","content":"2024-12-13T08:07:22.000Z"}]]},"git":{"createdTime":1704493101000,"updatedTime":1734077242000,"contributors":[{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":3},{"name":"wdower","username":"wdower","email":"57142072+wdower@users.noreply.github.com","commits":1,"url":"https://github.com/wdower"},{"name":"Amndeep Singh Mann","username":"","email":"amann@mitre.org","commits":1},{"name":"Will","username":"Will","email":"will@dower.dev","commits":1,"url":"https://github.com/Will"}]},"readingTime":{"minutes":2.19,"words":657},"filePathRelative":"courses/profile-dev-test/07.md","autoDesc":true}');export{h as comp,d as data};
