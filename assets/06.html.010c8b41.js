import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";import{r as o,o as r,c as l,a as e,b as t,F as c,d as s,e as n}from"./app.3b4d192a.js";const p={},d=s(`<h2 id="generating-inspec-results" tabindex="-1"><a class="header-anchor" href="#generating-inspec-results" aria-hidden="true">#</a> Generating InSpec Results</h2><p>InSpec allows you to output your test results to one or more reporters. You can configure the reporter(s) using either the <code>--json-config</code> option or the <code>--reporter</code> option. While you can configure multiple reporters to write to different files, only one reporter can output to the screen (via stdout).</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx -t docker://CONTAINER_NAME --reporter cli json:baseline_output.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="syntax" tabindex="-1"><a class="header-anchor" href="#syntax" aria-hidden="true">#</a> Syntax</h3><p>You can specify one or more reporters using the <code>--reporter cli</code> flag. You can also specify a output by appending a path separated by a colon.</p><p>Output json to screen:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter json:-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output yaml to screen:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>or</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter yaml:-
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output cli to screen and write json to a file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter cli json:tmp/output.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output nothing to screen and write junit and html to a file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter junit:tmp/junit.xml html:www/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Output json to screen and write to a junit file:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> /root/my_nginx --reporter json junit:tmp/junit.xml <span class="token operator">|</span> <span class="token function">tee</span> out.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>If you wish to pass the profiles directly after specifying the reporters you will need to use the end of options flag <code>--</code>:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> --reporter json junit:tmp/junit.xml -- profile1 profile2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inspec-config-json-file" tabindex="-1"><a class="header-anchor" href="#inspec-config-json-file" aria-hidden="true">#</a> InSpec <code>config.json</code> file</h4><p>InSpec also let&#39;s you capture all these in a configuration file:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;reporter&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;cli&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;stdout&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;json&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;file&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tmp/output.json&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;stdout&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),u=n("You can read more about this at "),h={href:"https://docs.chef.io/inspec/config/",target:"_blank",rel:"noopener noreferrer"},m=n("https://docs.chef.io/inspec/config/"),b=s('<h3 id="supported-reporters" tabindex="-1"><a class="header-anchor" href="#supported-reporters" aria-hidden="true">#</a> Supported Reporters</h3><p>The following are the current supported reporters:</p><ul><li>cli</li><li>json</li><li>json-min</li><li>yaml</li><li>documentation</li><li>junit</li><li>progress</li><li>json-rspec</li><li>html</li></ul>',3),g=n("You can read more here: "),v={href:"https://www.inspec.io/docs/reference/reporters/",target:"_blank",rel:"noopener noreferrer"},f=n("https://www.inspec.io/docs/reference/reporters/"),x=s(`<h3 id="putting-it-all-together" tabindex="-1"><a class="header-anchor" href="#putting-it-all-together" aria-hidden="true">#</a> Putting it all together</h3><p>The following command will run the nginx baseline profile from github and use the reporter to output a json file. You will need this json file for the next step of loading it into Heimdall:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec <span class="token builtin class-name">exec</span> https://github.com/dev-sec/nginx-baseline -t ssh://TARGET_USERNAME:TARGET_PASSWORD@TARGET_IP --reporter cli json:baseline_output.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3);function _(k,j){const a=o("ExternalLinkIcon");return r(),l(c,null,[d,e("p",null,[u,e("a",h,[m,t(a)])]),b,e("p",null,[g,e("a",v,[f,t(a)])]),x],64)}var q=i(p,[["render",_],["__file","06.html.vue"]]);export{q as default};
