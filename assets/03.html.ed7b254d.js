import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{r as i,o as r,c,a as e,b as t,F as l,d as o,e as s}from"./app.3b4d192a.js";const d={},p=o(`<h2 id="studying-an-inspec-profile" tabindex="-1"><a class="header-anchor" href="#studying-an-inspec-profile" aria-hidden="true">#</a> Studying an InSpec profile</h2><p>Let&#39;s start by creating a profile that will contain NGINX tests.</p><p>At your terminal, type:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>inspec init profile my_nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The terminal output should look like the following:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Create new profile at /root/my_nginx
 * Create directory controls
 * Create <span class="token function">file</span> controls/example.rb
 * Create <span class="token function">file</span> inspec.yml
 * Create directory libraries
 * Create <span class="token function">file</span> README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="understanding-the-profile-structure" tabindex="-1"><a class="header-anchor" href="#understanding-the-profile-structure" aria-hidden="true">#</a> Understanding the profile structure</h3><p>Let&#39;s take a look at how the profile is structured. We&#39;ll start with how a profile&#39;s files are structured and then move to what makes up an InSpec control.</p><p>First, run <code>tree</code> to see what&#39;s in the <code>my_nginx</code> profile.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>tree my_nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Which should look like:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>      my_nginx
      \u251C\u2500\u2500 README.md
      \u251C\u2500\u2500 controls
      \u2502   \u2514\u2500\u2500 example.rb
      \u2514\u2500\u2500 inspec.yml

      1 directory, 3 files
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s the role of each component.</p>`,13),u=e("li",null,[e("code",null,"README.md"),s(" provides documentation about the profile, including what it covers and how to run it.")],-1),h=e("li",null,[s("The "),e("code",null,"controls"),s(" directory contains files which implement the InSpec tests.")],-1),m=e("li",null,[e("code",null,"inspec.yml"),s(" provides metadata, or information, about the profile. Metadata includes the profile's description, author, copyright, and version.")],-1),b=s("The "),v=e("code",null,"libraries",-1),f=s(" directory contains resource extensions. A resource extension enables you to "),k={href:"https://www.inspec.io/docs/reference/dsl_resource/",target:"_blank",rel:"noopener noreferrer"},_=s("define your own resource types"),g=s(". You won't work with resource extensions in this module."),y=o(`<h3 id="understand-a-control-s-structure" tabindex="-1"><a class="header-anchor" href="#understand-a-control-s-structure" aria-hidden="true">#</a> Understand a control&#39;s structure</h3><p>Let&#39;s take a look at the default control file, <code>controls/example.rb</code>.</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>title <span class="token string-literal"><span class="token string">&#39;sample section&#39;</span></span>

<span class="token comment"># you can also use plain tests</span>
describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
<span class="token keyword">end</span>

<span class="token comment"># you add controls here</span>
control <span class="token string-literal"><span class="token string">&#39;tmp-1.0&#39;</span></span> <span class="token keyword">do</span>                        <span class="token comment"># A unique ID for this control</span>
  impact <span class="token number">0.7</span>                                <span class="token comment"># The criticality, if this control fails.</span>
  title <span class="token string-literal"><span class="token string">&#39;Create /tmp directory&#39;</span></span>             <span class="token comment"># A human-readable title</span>
  desc <span class="token string-literal"><span class="token string">&#39;An optional description...&#39;</span></span>
  describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>                  <span class="token comment"># The actual test</span>
    it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Tip for developing profiles</p><p>When creating new profiles use the existing example file as a template</p></div><p>This example shows two tests. Both tests check for the existence of the <code>/tmp</code> directory. The second test provides additional information about the test. Let&#39;s break down each component.</p><ul><li><code>control</code> (line 9) is followed by the control&#39;s name. Each control in a profile has a unique name.</li><li><code>impact</code> (line 10) measures the relative importance of the test and must be a value between 0.0 and 1.0.</li><li><code>title</code> (line 11) defines the control&#39;s purpose.</li><li><code>desc</code> (line 12) provides a more complete description of what the control checks for.</li><li><code>describe</code> (lines 13 \u2014 15) defines the test. Here, the test checks for the existence of the <code>/tmp</code> directory.</li></ul><p>In Ruby, the <code>do</code> and <code>end</code> keywords define a <code>block</code>. An InSpec control always contains at least one <code>describe</code> block. However, a control can contain many <code>describe</code> blocks.</p>`,7),w={class:"custom-container tip"},x=e("p",{class:"custom-container-title"},"More information on a block in Ruby",-1),I={href:"http://ruby-for-beginners.rubymonstas.org/blocks.html",target:"_blank",rel:"noopener noreferrer"},A=s("Ruby's block syntax"),S=o(`<h3 id="understand-a-describe-block-s-structure" tabindex="-1"><a class="header-anchor" href="#understand-a-describe-block-s-structure" aria-hidden="true">#</a> Understand a describe block&#39;s structure</h3><p>As with many test frameworks, InSpec code resembles natural language. Here&#39;s the format of a describe block.</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe <span class="token operator">&lt;</span>entity<span class="token operator">&gt;</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> <span class="token operator">&lt;</span>expectation<span class="token operator">&gt;</span> <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>An InSpec test has two main components: the subject to examine and the subject&#39;s expected state. Here, <code>&lt;entity&gt;</code> is the subject you want to examine, for example, a package name, service, file, or network port. The <code>&lt;expectation&gt;</code> specifies the desired result or expected state, for example, that a port should be open (or perhaps should not be open.)</p><p>Let&#39;s take a closer look at the <code>describe</code> block in the example.</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_directory <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Because InSpec resembles human-readable language, you might read this test as &quot;/tmp should be a directory.&quot; Let&#39;s break down each component.</p><hr><h4 id="file" tabindex="-1"><a class="header-anchor" href="#file" aria-hidden="true">#</a> <code>file</code></h4>`,9),T={href:"https://www.inspec.io/docs/reference/resources/file/",target:"_blank",rel:"noopener noreferrer"},E=s("file"),C=s(" is an InSpec "),L={href:"https://www.inspec.io/docs/reference/resources/",target:"_blank",rel:"noopener noreferrer"},N=s("resource"),R=s(". If you're familiar with Chef, you know that a resource configures one part of the system. InSpec resources are similar. For example, the InSpec file resource tests for file attributes, including a file's owner, mode, and permissions. The example examines the /tmp directory."),B=o('<hr><h4 id="it" tabindex="-1"><a class="header-anchor" href="#it" aria-hidden="true">#</a> <code>it</code></h4><p>The <code>it</code> statement validates one of your resource&#39;s features. A <code>describe</code> block contains one or more <code>it</code> statements. <code>it</code> enables you to test the resource itself. You&#39;ll also see <code>its</code>, which describes some feature of the resource, such as its mode or owner. You&#39;ll see examples of both <code>it</code> and <code>its</code> shortly.</p><hr><h4 id="should" tabindex="-1"><a class="header-anchor" href="#should" aria-hidden="true">#</a> <code>should</code></h4><p><code>should</code> describes the expectation. <code>should</code> asserts that the condition that follows <em>should</em> be true. Alternatively, <code>should_not</code> asserts that the condition that follows <em>should not</em> be true. You&#39;ll see examples of both shortly.</p><hr><h4 id="be-directory" tabindex="-1"><a class="header-anchor" href="#be-directory" aria-hidden="true">#</a> <code>be_directory</code></h4>',8),H=e("code",null,"be_directory",-1),M=s(" is an example of a "),q={href:"https://www.inspec.io/docs/reference/matchers/",target:"_blank",rel:"noopener noreferrer"},D=s("matcher"),F=s(". A matcher compares a resource's actual value to its expected value. InSpec provides several predefined matchers. The "),V=e("code",null,"file",-1),Y=s(" resource provides the "),j=e("code",null,"be_directory",-1),U=s(" matcher.");function W(G,X){const n=i("ExternalLinkIcon");return r(),c(l,null,[p,e("ul",null,[u,h,m,e("li",null,[b,v,f,e("a",k,[_,t(n)]),g])]),y,e("div",w,[x,e("p",null,[e("a",I,[A,t(n)])])]),S,e("p",null,[e("a",T,[E,t(n)]),C,e("a",L,[N,t(n)]),R]),B,e("p",null,[H,M,e("a",q,[D,t(n)]),F,V,Y,j,U])],64)}var K=a(d,[["render",W],["__file","03.html.vue"]]);export{K as default};
