import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{r as i,o as p,c,a as e,b as t,F as l,d as n,e as s}from"./app.3b4d192a.js";const r={},d=n(`<h2 id="inspec-examples" tabindex="-1"><a class="header-anchor" href="#inspec-examples" aria-hidden="true">#</a> Inspec Examples</h2><h3 id="rspec-explicit-subject" tabindex="-1"><a class="header-anchor" href="#rspec-explicit-subject" aria-hidden="true">#</a> rSpec Explicit Subject</h3><p>Here we have an InSpec test that lists out its current directory. Our original test code looks like this:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ls -al&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>strip <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should_not be_empty <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u=s("If we would like to have a more detailed feedback to our user, we can override the standard title of our describe block with a specific message that describes the intent of the test and use the "),h={href:"https://relishapp.com/rspec/rspec-core/docs/subject/explicit-subject",target:"_blank",rel:"noopener noreferrer"},k=s("Explicit Subject"),m=s(' to tell inspec what the "subject" is for the test, then, we could refactor the code like this:'),v=n(`<div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe <span class="token string-literal"><span class="token string">&quot;this is a detailed message&quot;</span></span> <span class="token keyword">do</span>
  subject <span class="token punctuation">{</span> command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ls -al&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>strip <span class="token punctuation">}</span>
  it<span class="token punctuation">{</span> should_not be_empty <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="looping-through-data" tabindex="-1"><a class="header-anchor" href="#looping-through-data" aria-hidden="true">#</a> Looping Through Data</h3><p>The <code>file</code> resource is perfect for looking at single files and thier properities, however, it does not look at groups of files. To do that we need to use multiple resources in concert. Let&#39;s use the <code>command</code> resource to run the <code>find</code> command, or it&#39;s equivalent for your target OS, and then use the <code>file</code> resource. Using multiple resources together is one of the key values InSpec provides, allowing you get get at just the data you need when you need it.</p><div class="custom-container warning"><p class="custom-container-title">Avoid Large Sets or &#39;Check Everyone at the Door&#39; Approaches</p><p>For IO intensive (full filesystem, or global scans) or large scale processes, try to be as specific as possible with your searches. Think about using &#39;negitive logic&#39; vs &#39;positive logic&#39; - &quot;Find me all the items outside my target set&quot; vs &quot;Look at each item in the set and ensure it has these propertiies&quot;.</p><p>This &#39;find the outsiders&#39; vs &#39;check everyone at the door&#39; approach can really speed things along. Again, keep your data set as small as possible, don&#39;t inspect more then the requirements, well, requires.</p></div><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;find ~/* -type f -maxdepth 0 -xdev&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>split<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>fname<span class="token operator">|</span>
  describe file<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">do</span>
    its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;owner&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;ec2-user&#39;</span></span> <span class="token punctuation">}</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-should-vs-expect-syntax" tabindex="-1"><a class="header-anchor" href="#the-should-vs-expect-syntax" aria-hidden="true">#</a> The <code>should</code> vs. <code>expect</code> syntax</h3><p>Users familiar with the rSpec testing framework may know that there are two ways to write test statements: <code>should</code> and <code>expect</code>. The RSpec community decided that <code>expect</code> is the preferred syntax.</p><p>InSpec recommends the <code>should</code> syntax as it tends to read more easily to those users who are not as technical, however there are times when the <code>expect</code> syntax will communicate much more clearly to the end-user.</p><p>InSpec will continue to support both methods of writing tests. Consider this file test:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_file <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can be re-written with expect syntax</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token string-literal"><span class="token string">&#39;should be a file&#39;</span></span> <span class="token keyword">do</span>
    expect<span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>be_file<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of both of the above examples looks like this:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>File /tmp/test.txt
   \u2714  should be a <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, you can make use of the <code>subject</code> keyword to further control your output if you choose:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe <span class="token string-literal"><span class="token string">&#39;test file&#39;</span></span> <span class="token keyword">do</span>
  subject <span class="token punctuation">{</span> file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  it <span class="token string-literal"><span class="token string">&#39;should be a file&#39;</span></span> <span class="token keyword">do</span>
    expect<span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>be_file<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2026 which will render the following output:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">test</span> <span class="token function">file</span>
  \u2714  should be a <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,18),b=s("Reference: "),g={href:"https://docs.chef.io/inspec/profiles/",target:"_blank",rel:"noopener noreferrer"},f=s("https://docs.chef.io/inspec/profiles/"),w=n(`<h3 id="expect-syntax-and-password-hashes" tabindex="-1"><a class="header-anchor" href="#expect-syntax-and-password-hashes" aria-hidden="true">#</a> <code>Expect</code> syntax and Password Hashes</h3><p>Here we have an inspec test that checks if passwords are SHA512 hashes. As a quick thought exercise, can you think of how we can adjust the control below to support SHA512 or higher assuming where you are testing uses SHA1024 or even SHA2048?</p><p>As we said, when possible, and when there is a high change of a large set only having a few offending items, attempt to find only those items that could be outside our requirements, if there are none, wonderful, we met our requirement.</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>bad_users <span class="token operator">=</span> inspec<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>where <span class="token punctuation">{</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;*&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!~</span> <span class="token regex-literal"><span class="token regex">/\\$6\\$/</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span>users

describe <span class="token string-literal"><span class="token string">&#39;Password hashes in /etc/shadow&#39;</span></span> <span class="token keyword">do</span>
  it <span class="token string-literal"><span class="token string">&#39;should only contain SHA512 hashes&#39;</span></span> <span class="token keyword">do</span>
    failure_message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Users without SHA512 hashes: </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">bad_users<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;, &#39;</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span>
    expect<span class="token punctuation">(</span>bad_users<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_empty<span class="token punctuation">,</span> failure_message
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function y(x,_){const a=i("ExternalLinkIcon");return p(),c(l,null,[d,e("p",null,[u,e("a",h,[k,t(a)]),m]),v,e("p",null,[b,e("a",g,[f,t(a)])]),w],64)}var j=o(r,[["render",y],["__file","08.html.vue"]]);export{j as default};
