import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";import{d as e}from"./app.3b4d192a.js";var n="/saf-training/assets/Heimdall_NotReviewed_Filter.b5cd3610.png",s="/saf-training/assets/Heimdall_NotReviewed_Data.7ef24658.png",t="/saf-training/assets/Heimdall_Comparison_WithAttestations.4e40c775.png",i="/saf-training/assets/Heimdall_WithAttestations_Details.8216dcee.png";const o={},l=e('<h2 id="_12-manual-attestations" tabindex="-1"><a class="header-anchor" href="#_12-manual-attestations" aria-hidden="true">#</a> 12. Manual Attestations</h2><p>What about controls that cannot be automated and require manual review? You may have noticed that Heimdall displays controls in 4 statuses: <code>Passed</code>, <code>Failed</code>, <code>Not Applicable</code>, and <code>Not Reviewed</code>.</p><p>Controls may be <code>Not Reviewed</code> for multiple reasons. One major reason is that the control requires manual review. You can explore the details of the <code>Not Reviewed</code> controls to find out more.</p><h3 id="_12-1-explore-the-not-reviewed-controls" tabindex="-1"><a class="header-anchor" href="#_12-1-explore-the-not-reviewed-controls" aria-hidden="true">#</a> 12.1 Explore the Not Reviewed Controls</h3><p>Look at the hardened results again in Heimdall. Go back to the menu in the top left to toggle off &quot;Comparison View&quot; and select on the hardened results.</p><p><img src="'+n+'" alt="Alt text" loading="lazy"></p><p>Scroll down to see the details and learn why the controls were not reviewed.</p><p><img src="'+s+`" alt="Alt text" loading="lazy"></p><p>You can see that for various reasons, many of these controls require manual review. If someone does that manual review, how can we show that in the data?</p><h3 id="_12-2-manual-attestations-using-saf-cli" tabindex="-1"><a class="header-anchor" href="#_12-2-manual-attestations-using-saf-cli" aria-hidden="true">#</a> 12.2 Manual Attestations Using SAF CLI</h3><p>You have already seen the InSpec profiles and the Heimdall application that the SAF provides. Another feature of the SAF is the SAF CLI. This is a command line utility tool that helps with various steps in the security automation process. You can see all of the SAF CLI&#39;s capability <a href="saf-cli.mitre.org">here</a>, but we will look more at how we can use it to add manual attestation data to our overall results.</p><h3 id="_12-3-get-familiar-with-saf-cli" tabindex="-1"><a class="header-anchor" href="#_12-3-get-familiar-with-saf-cli" aria-hidden="true">#</a> 12.3 Get Familiar with SAF CLI</h3><p>SAF CLI has been downloaded into your Codespaces lab environmnet, so it is available for you to use on the command line. Try out a few commands to see what you can do!</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf --version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf <span class="token builtin class-name">help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The help command will give you the information on how to use the SAF CLI:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>The MITRE Security Automation Framework <span class="token punctuation">(</span>SAF<span class="token punctuation">)</span> Command Line Interface <span class="token punctuation">(</span>CLI<span class="token punctuation">)</span> brings together applications, techniques, libraries, and tools developed by MITRE and the security community to streamline security automation <span class="token keyword">for</span> systems and DevOps pipelines

VERSION
  @mitre/saf/1.1.12 linux-x64 node-v16.14.2

USAGE
  $ saf <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>

TOPICS
  attest
  convert   <span class="token punctuation">[</span>Normalize<span class="token punctuation">]</span>    Convert security results from all your security tools between common data formats
  generate  <span class="token punctuation">[</span>Generate<span class="token punctuation">]</span>     Generate pipeline thresholds, configuration files, and <span class="token function">more</span>
  harden    <span class="token punctuation">[</span>Harden<span class="token punctuation">]</span>       Implement security baselines using Ansible, Chef, and Terraform content: Visit https://saf.mitre.org/<span class="token comment">#/harden to explore</span>
            and run hardening scripts
  plugins   List installed plugins.
  scan      <span class="token punctuation">[</span>Scan<span class="token punctuation">]</span>         Scan to get detailed security testing results: Visit https://saf.mitre.org/<span class="token comment">#/validate to explore and run inspec profiles</span>
  validate  <span class="token punctuation">[</span>Validate<span class="token punctuation">]</span>     Verify pipeline thresholds
  view      <span class="token punctuation">[</span>Visualize<span class="token punctuation">]</span>    Identify overall security status and deep-dive to solve specific security defects

COMMANDS
  convert           The generic convert <span class="token builtin class-name">command</span> translates any supported file-based security results <span class="token builtin class-name">set</span> into the Heimdall Data Format
  convert ckl2poam  Translate DISA Checklist CKL file<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to POA<span class="token operator">&amp;</span>M files
  harden            Visit https://saf.mitre.org/<span class="token comment">#/harden to explore and run hardening scripts</span>
  heimdall          Run an instance of Heimdall Lite to visualize your Data
  <span class="token builtin class-name">help</span>              Display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> saf.
  plugins           List installed plugins.
  scan              Visit https://saf.mitre.org/<span class="token comment">#/validate to explore and run inspec profiles</span>
  summary           Get a quick compliance overview of an HDF <span class="token function">file</span>
  version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest -h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This will give you the following information:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>USAGE
  $ saf attest COMMAND

COMMANDS
  attest apply
  attest create
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-4-create-manual-attestation-data" tabindex="-1"><a class="header-anchor" href="#_12-4-create-manual-attestation-data" aria-hidden="true">#</a> 12.4 Create Manual Attestation Data</h3><p>After someone on your team completes the manual check that is required for your security control, record that information with the help of the SAF CLI.</p><p>First, look at the flags for the <code>saf attest create</code> command.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest create -h
USAGE
  $ saf attest create -o <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">[</span>-i <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-t json<span class="token operator">|</span>xlsx<span class="token operator">|</span>yml<span class="token operator">|</span>yaml<span class="token punctuation">]</span>

FLAGS
  -h, --help             Show CLI help.
  -i, --input<span class="token operator">=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>    <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> An input HDF <span class="token function">file</span> to search <span class="token keyword">for</span> controls
  -o, --output<span class="token operator">=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>   <span class="token punctuation">(</span>required<span class="token punctuation">)</span> The output filename
  -t, --format<span class="token operator">=</span><span class="token operator">&lt;</span>option<span class="token operator">&gt;</span>  <span class="token punctuation">[</span>default: json<span class="token punctuation">]</span> <span class="token punctuation">(</span>optional<span class="token punctuation">)</span> The output <span class="token function">file</span> <span class="token builtin class-name">type</span>
                         <span class="token operator">&lt;</span>options: json<span class="token operator">|</span>xlsx<span class="token operator">|</span>yml<span class="token operator">|</span>yaml<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>So, the output flag is the required flag and the others are optional. Let&#39;s define the output file as <code>./results/manual_attestation_results.json</code> for the attestation we are going to create.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest create -o ./results/manual_attestation_results.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here is an example of an attested control that we can create based on</p><ol><li>The results we saw in Heimdall</li><li>Our (hypothetical) completed manual check (Let&#39;s pretend that we did check this!)</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest create -o ./results/manual_attestation_results.json
Enter a control ID or enter <span class="token string">&#39;q&#39;</span> to exit: V-40792
Attestation explanation: Verified that the server-side session management is configured correctly.
Frequency <span class="token punctuation">(</span>1d/3d/1wk/2wk/1m/3m/6m/1y/1.5y/custom<span class="token punctuation">)</span>: 3m
Enter status <span class="token punctuation">((</span>p<span class="token punctuation">)</span>assed/<span class="token punctuation">(</span>f<span class="token punctuation">)</span>ailed<span class="token punctuation">)</span>: p
Updated By: Emily Rodriguez
Enter a control ID or enter <span class="token string">&#39;q&#39;</span> to exit: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Now, go through and add more attestations of the Not Reviewed results. You can decide if they should pass or fail as if you hypothetically did check these controls manually. Type <code>q</code> when you are done.</p><h3 id="_12-5-apply-the-manual-attestation-data" tabindex="-1"><a class="header-anchor" href="#_12-5-apply-the-manual-attestation-data" aria-hidden="true">#</a> 12.5 Apply the Manual Attestation Data</h3><p>Use the <code>-h</code> flag to learn about applying attestations.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest apply -h
USAGE
  $ saf attest apply -i <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> -o <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-h<span class="token punctuation">]</span>

FLAGS
  -h, --help              Show CLI help.
  -i, --input<span class="token operator">=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">..</span>.  <span class="token punctuation">(</span>required<span class="token punctuation">)</span> Your input HDF and Attestation file<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
  -o, --output<span class="token operator">=</span><span class="token operator">&lt;</span>value<span class="token operator">&gt;</span>    <span class="token punctuation">(</span>required<span class="token punctuation">)</span> Output <span class="token function">file</span> or folder <span class="token punctuation">(</span>for multiple executions<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Apply the attestation like this:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>saf attest apply -i ./results/nginx_hardened_results.json ./results/manual_attestation_results.json -o ./results/nginx_hardened_with_manual_attestations.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-6-visualize-the-results-heimdall" tabindex="-1"><a class="header-anchor" href="#_12-6-visualize-the-results-heimdall" aria-hidden="true">#</a> 12.6 Visualize the Results - Heimdall</h3><p>As we have done before,</p><ol><li>Download the <code>nginx_hardened_with_manual_attestations.json</code> file.</li><li>Upload this file to Heimdall.</li><li>Click on the top left menu and toggle on the Comparison View</li><li>Compare the results.</li></ol><p>In the example, a few manual attestations were completed, some of which were recorded as passing and some as failing. You may have chosen to do your manual attestations differently and have different metrics.</p><p><img src="`+t+'" alt="Alt text" loading="lazy"></p><p>You can look at the details to find the attestation information captured. Expand the details for each control to view this data.</p><p><img src="'+i+'" alt="Alt text" loading="lazy"></p>',42);function r(p,c){return l}var h=a(o,[["render",r],["__file","12.html.vue"]]);export{h as default};
