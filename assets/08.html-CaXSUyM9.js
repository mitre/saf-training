import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a,o as i}from"./app-Cw6QY_M_.js";const n={};function o(s,e){return i(),t("div",null,[...e[0]||(e[0]=[a('<h2 id="understanding-security-benchmarks" tabindex="-1"><a class="header-anchor" href="#understanding-security-benchmarks"><span>Understanding Security Benchmarks</span></a></h2><h3 id="key-differences-from-traditional-software" tabindex="-1"><a class="header-anchor" href="#key-differences-from-traditional-software"><span>Key Differences from Traditional Software</span></a></h3><p>Security benchmarks differ from traditional software development in several critical ways:</p><ol><li><p><strong>Completeness Requirement</strong></p><ul><li>Traditional Software: Can be released with partial features</li><li>Security Benchmarks: Must meet ALL requirements for a specific version</li></ul></li><li><p><strong>Version Specificity</strong></p><ul><li>Each benchmark version is a complete, standalone entity</li><li>InSpec profiles must match their corresponding benchmark version exactly</li></ul></li></ol><h3 id="development-approaches" tabindex="-1"><a class="header-anchor" href="#development-approaches"><span>Development Approaches</span></a></h3><p>Two common approaches to benchmark development:</p><ul><li><strong>Micro Approach</strong>: Gradual, incremental development</li><li><strong>Macro Approach</strong>: Complete implementation in larger chunks</li></ul><div class="hint-container tip"><p class="hint-container-title">Both approaches are valid</p><p>Choose an approach or combination thereof that is based on your team&#39;s workflow preferences.</p></div><h3 id="version-control-best-practices" tabindex="-1"><a class="header-anchor" href="#version-control-best-practices"><span>Version Control Best Practices</span></a></h3><h4 id="working-with-branches" tabindex="-1"><a class="header-anchor" href="#working-with-branches"><span>Working with Branches</span></a></h4><ul><li>Never work directly on &#39;main&#39;</li><li>Always fork from the latest release</li><li>Consider &#39;main&#39; or &#39;development&#39; branches as pre-release candidates</li></ul><h3 id="practical-exercise" tabindex="-1"><a class="header-anchor" href="#practical-exercise"><span>Practical Exercise</span></a></h3><p>Try answering these questions:</p><ol><li>Why can&#39;t security benchmarks be released incrementally?</li><li>How should you handle new requirements that arise between releases?</li><li>What branch strategy would you use for a new benchmark version?</li></ol><div class="hint-container important"><p class="hint-container-title">Security benchmark validation is binary</p><p>The benchmark validation either meets all requirements or it doesn&#39;t. It being an accurate, representative assessment (and thereby useful to others) requires that it be the former.</p></div>',15)])])}const p=r(n,[["render",o]]),m=JSON.parse('{"path":"/courses/profile-dev-test/08.html","title":"8. Security Benchmarks vs Traditional Software","lang":"en-US","frontmatter":{"order":8,"next":"09.md","title":"8. Security Benchmarks vs Traditional Software","author":"Aaron Lippold","description":"Understanding Security Benchmarks Key Differences from Traditional Software Security benchmarks differ from traditional software development in several critical ways: Completene...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"8. Security Benchmarks vs Traditional Software\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-11T08:06:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Lippold\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/saf-training/saf-training/courses/profile-dev-test/08.html"}],["meta",{"property":"og:site_name","content":"MITRE SAF Training"}],["meta",{"property":"og:title","content":"8. Security Benchmarks vs Traditional Software"}],["meta",{"property":"og:description","content":"Understanding Security Benchmarks Key Differences from Traditional Software Security benchmarks differ from traditional software development in several critical ways: Completene..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-11T08:06:54.000Z"}],["meta",{"property":"article:author","content":"Aaron Lippold"}],["meta",{"property":"article:modified_time","content":"2024-12-11T08:06:54.000Z"}]]},"git":{"createdTime":1704493101000,"updatedTime":1733904414000,"contributors":[{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":3},{"name":"Amndeep Singh Mann","username":"","email":"amann@mitre.org","commits":1}]},"readingTime":{"minutes":0.71,"words":213},"filePathRelative":"courses/profile-dev-test/08.md","autoDesc":true}');export{p as comp,m as data};
