import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,a as n,o as s}from"./app-Cw6QY_M_.js";const a="/saf-training/assets/Codespaces_InputFile_NGINX-B-4LtvNZ.png",o={};function r(l,e){return s(),t("div",null,[...e[0]||(e[0]=[n(`<h2 id="_7-1-what-are-inputs-and-why-do-i-need-them" tabindex="-1"><a class="header-anchor" href="#_7-1-what-are-inputs-and-why-do-i-need-them"><span>7.1 What are inputs and why do I need them?</span></a></h2><p>Every InSpec profile on the SAF site is written to comply with specific security guidance. However, every team&#39;s environment may be slightly different. For example, the path to a file may vary between environments, or the list of permitted users for a certain system may differ.</p><p>To accommodate these differences, InSpec profiles utilize inputs. In the previous section, we ran the InSpec profile on the NGINX component without specifying any inputs. This means that it just used the defaults. Now, let&#39;s review these variables and decide which inputs we want to change for our environment.</p><div class="hint-container tip"><p class="hint-container-title">Best Practice</p><p>It is best practice to always run profiles with inputs so that the profile is properly tailored to your environment.</p></div><h2 id="_7-2-profile-inputs-see-inspec-yml-file" tabindex="-1"><a class="header-anchor" href="#_7-2-profile-inputs-see-inspec-yml-file"><span>7.2 Profile Inputs (see <code>inspec.yml</code> file)</span></a></h2><p>This profile uses InSpec Inputs to make the tests more flexible. You can provide inputs at runtime either via the CLI or via YAML files to help the profile work best in your deployment.</p><div class="hint-container caution"><p class="hint-container-title">Caution</p><p><strong>DO NOT</strong> change the inputs in the <code>inspec.yml</code> file. This is where the variables and their defaults are defined.</p><p><strong>DO</strong> create a separate file (often named <code>inputs.yml</code>) or pass values via the command line to overwrite default values to tailor the profile.</p></div><p>The <code>inputs</code> configured in the <code>inspec.yml</code> file are <strong>profile definitions and defaults for the profile</strong> and not for tailoring. Automated InSpec scans are frequently run from a script, inside a pipeline, or some kind of task scheduler where the runner will often not have access to the <code>inspec.yml</code>. However, those scripts or pipelines can easily pass an inputs file or command line arguments to modify the default values defined in the <code>inspec.yml</code> file.</p><p>To tailor the tested values for your deployment or organizationally defined values, <strong><em>you may update the inputs</em></strong>.</p><p>More information about InSpec inputs can be found in the <a href="https://docs.chef.io/inspec/inputs/" target="_blank" rel="noopener noreferrer">InSpec Inputs Documentation</a>.</p><h2 id="_7-3-use-an-input-file-to-tailor-an-inspec-profile" tabindex="-1"><a class="header-anchor" href="#_7-3-use-an-input-file-to-tailor-an-inspec-profile"><span>7.3 Use an <code>--input-file</code> to tailor an InSpec profile</span></a></h2><p>For the NGINX example, we are going to add the following inputs. Make a new file called <code>inputs.yml</code> in your lab environment:</p><ol><li>Right-click near the file list on the left side.</li><li>Click &quot;New File...&quot;</li><li>Copy the code below into your <code>inputs.yml</code> file.</li></ol><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">---</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">key_file_path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">/etc/ssl/nginx-selfsigned.pem</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">org_allowed_nginx_version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1.23.1</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">nginx_owner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">nginx</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uses_pki</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sys_admin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">sys_admin_group</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">root</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In your codespaces, it should look like this:</p><figure><img src="`+a+'" alt="NGINX Input File" tabindex="0" loading="lazy"><figcaption>NGINX Input File</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">How do I find the values that should be in the input file?</p><p>Start by checking the README on the GitHub repository for that InSpec profile. Most of the profiles have a &quot;Tailoring to Your Environment&quot; section that guides you through what variables are available as inputs.</p><p>To determine the value itself, you should consider the environment, consult with your assessor, and explore the target to find the necessary information.</p><p>If the profile does not have a &quot;Tailoring to Your Environment&quot; section in its README, you can reference the <code>inspec.yml</code> file to see what inputs are defined and available and what their default values are. However, remember not to modify the <code>inspec.yml</code> file itself.</p></div><div class="hint-container info"><p class="hint-container-title">What is the difference between tailoring an InSpec profile with inputs vs. overlays?</p><p><strong>Inputs</strong> are meant to tailor the profile while <em>still complying</em> with the guidance document on which the profile is based.</p><p><strong>Overlays</strong> are used when the organization&#39;s requirements <em>differ</em> from the security guidance. For example, if there are additional controls required or some controls are not applicable to the organization&#39;s requirements.</p></div>',18)])])}const d=i(o,[["render",r]]),c=JSON.parse(`{"path":"/courses/user/07.html","title":"7. Tailoring Inputs for InSpec","lang":"en-US","frontmatter":{"order":7,"next":"08.md","title":"7. Tailoring Inputs for InSpec","author":"Aaron Lippold","headerDepth":3,"toc":{"levels":[2,5]},"description":"7.1 What are inputs and why do I need them? Every InSpec profile on the SAF site is written to comply with specific security guidance. However, every team's environment may be s...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"7. Tailoring Inputs for InSpec\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T20:30:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aaron Lippold\\"}]}"],["meta",{"property":"og:url","content":"https://mitre.github.io/saf-training/saf-training/courses/user/07.html"}],["meta",{"property":"og:site_name","content":"MITRE SAF Training"}],["meta",{"property":"og:title","content":"7. Tailoring Inputs for InSpec"}],["meta",{"property":"og:description","content":"7.1 What are inputs and why do I need them? Every InSpec profile on the SAF site is written to comply with specific security guidance. However, every team's environment may be s..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-12-03T20:30:14.000Z"}],["meta",{"property":"article:author","content":"Aaron Lippold"}],["meta",{"property":"article:modified_time","content":"2024-12-03T20:30:14.000Z"}]]},"git":{"createdTime":1656525471000,"updatedTime":1733257814000,"contributors":[{"name":"Emily Rodriguez","username":"","email":"ecrodriguez@mm279976-pc.lan","commits":13},{"name":"wdower","username":"wdower","email":"will@dower.dev","commits":2,"url":"https://github.com/wdower"},{"name":"Aaron Lippold","username":"","email":"lippold@gmail.com","commits":2},{"name":"Shivani Karikar","username":"","email":"karikarshivani@gmail.com","commits":1},{"name":"Will","username":"Will","email":"will@dower.dev","commits":1,"url":"https://github.com/Will"},{"name":"dependabot[bot]","username":"dependabot[bot]","email":"49699333+dependabot[bot]@users.noreply.github.com","commits":1,"url":"https://github.com/dependabot[bot]"},{"name":"p-oneil","username":"p-oneil","email":"poneil@mitre.org","commits":1,"url":"https://github.com/p-oneil"}]},"readingTime":{"minutes":2,"words":599},"filePathRelative":"courses/user/07.md","autoDesc":true}`);export{d as comp,c as data};
