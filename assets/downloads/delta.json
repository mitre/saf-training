{
  "ignoreFormattingDiff": {
    "addedControlIDs": [
      "SV-213913"
    ],
    "removedControlIDs": [],
    "renamedControlIDs": {},
    "changedControlIDs": [
      "SV-213900",
      "SV-213901",
      "SV-213902",
      "SV-213903",
      "SV-213904",
      "SV-213905",
      "SV-213906",
      "SV-213907",
      "SV-213908",
      "SV-213909",
      "SV-213910",
      "SV-213911",
      "SV-213912",
      "SV-213914",
      "SV-213915",
      "SV-213916",
      "SV-213917",
      "SV-213918",
      "SV-213919",
      "SV-213920",
      "SV-213921",
      "SV-213922",
      "SV-213923",
      "SV-213924",
      "SV-213926",
      "SV-213927",
      "SV-251040"
    ],
    "addedControls": {
      "SV-213913": {
        "tags": {
          "check_id": "C-15131r952219_chk",
          "severity": "medium",
          "gid": "V-213913",
          "rid": "SV-213913r952219_rule",
          "stig_id": "SQL6-D0-001800",
          "gtitle": "SRG-APP-000231-DB-000154",
          "fix_id": "F-15129r951656_fix",
          "documentable": false,
          "legacy": [
            "SV-93795",
            "V-79089"
          ],
          "cci": [
            "CCI-001199"
          ],
          "nist": [
            "SC-28"
          ]
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "id": "SV-213913",
        "title": "The Certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.",
        "desc": "Backup and recovery of the Certificate used for encryption is critical to the complete recovery of the database. Not having this key can lead to loss of data during recovery.",
        "impact": 0.5,
        "descs": {
          "check": "If the application owner and authorizing official have determined that encryption of data at rest is not required, this is not a finding.\n\nReview procedures for and evidence of backup of the Certificate used for encryption in the System Security Plan. \n\nIf the procedures or evidence does not exist, this is a finding. \n\nIf the procedures do not indicate that a backup of the Certificate used for encryption is stored in a secure location that is not on the SQL Server, this is a finding. \n\nIf procedures do not indicate access restrictions to the Certificate backup, this is a finding.",
          "fix": "Document and implement procedures to safely back up and store the Certificate used for encryption in a secure location that is not on the SQL Server. Include in the procedures to establish evidence of backup and storage as well as careful, restricted access and restoration of the Certificate.\n\nBACKUP CERTIFICATE 'CertificateName' TO FILE = 'path_to_file' \nWITH PRIVATE KEY (FILE = 'path_to_pvk', ENCRYPTION BY PASSWORD = 'password'); \n\nAs this requires a password, ensure it is not exposed to unauthorized persons or stored as plain text."
        }
      }
    },
    "changedControls": {
      "SV-213900": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213901": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213902": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213903": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213904": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213905": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213906": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213907": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213908": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213909": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213910": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213911": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213912": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213914": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213915": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213916": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213917": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213918": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213919": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213920": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy. One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213921": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213922": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213923": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213924": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-213926": {
        "tags": {
          "documentable": false,
          "legacy": []
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "desc": "DBMSs handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to SQL Server or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.",
        "impact": 0.5,
        "descs": {}
      },
      "SV-213927": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      },
      "SV-251040": {
        "tags": {
          "documentable": false
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "descs": {}
      }
    }
  },
  "rawDiff": {
    "addedControlIDs": [
      "SV-213913"
    ],
    "removedControlIDs": [],
    "renamedControlIDs": {},
    "changedControlIDs": [
      "SV-213900",
      "SV-213901",
      "SV-213902",
      "SV-213903",
      "SV-213904",
      "SV-213905",
      "SV-213906",
      "SV-213907",
      "SV-213908",
      "SV-213909",
      "SV-213910",
      "SV-213911",
      "SV-213912",
      "SV-213914",
      "SV-213915",
      "SV-213916",
      "SV-213917",
      "SV-213918",
      "SV-213919",
      "SV-213920",
      "SV-213921",
      "SV-213922",
      "SV-213923",
      "SV-213924",
      "SV-213926",
      "SV-213927",
      "SV-251040"
    ],
    "addedControls": {
      "SV-213913": {
        "tags": {
          "check_id": "C-15131r952219_chk",
          "severity": "medium",
          "gid": "V-213913",
          "rid": "SV-213913r952219_rule",
          "stig_id": "SQL6-D0-001800",
          "gtitle": "SRG-APP-000231-DB-000154",
          "fix_id": "F-15129r951656_fix",
          "documentable": false,
          "legacy": [
            "SV-93795",
            "V-79089"
          ],
          "cci": [
            "CCI-001199"
          ],
          "nist": [
            "SC-28"
          ]
        },
        "refs": [
          "DPMS Target MS SQL Server 2016 Database"
        ],
        "id": "SV-213913",
        "title": "The Certificate used for encryption must be backed up and stored in a secure location that is not on the SQL Server.",
        "desc": "Backup and recovery of the Certificate used for encryption is critical to the complete recovery of the database. Not having this key can lead to loss of data during recovery.",
        "impact": 0.5,
        "descs": {
          "check": "If the application owner and authorizing official have determined that encryption of data at rest is not required, this is not a finding.\n\nReview procedures for and evidence of backup of the Certificate used for encryption in the System Security Plan. \n\nIf the procedures or evidence does not exist, this is a finding. \n\nIf the procedures do not indicate that a backup of the Certificate used for encryption is stored in a secure location that is not on the SQL Server, this is a finding. \n\nIf procedures do not indicate access restrictions to the Certificate backup, this is a finding.",
          "fix": "Document and implement procedures to safely back up and store the Certificate used for encryption in a secure location that is not on the SQL Server. Include in the procedures to establish evidence of backup and storage as well as careful, restricted access and restoration of the Certificate.\n\nBACKUP CERTIFICATE 'CertificateName' TO FILE = 'path_to_file' \nWITH PRIVATE KEY (FILE = 'path_to_pvk', ENCRYPTION BY PASSWORD = 'password'); \n\nAs this requires a password, ensure it is not exposed to unauthorized persons or stored as plain text."
        }
      }
    },
    "changedControls": {
      "SV-213900": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include: assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nSQL Server must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organization's current account policy. \n\nAutomation may be comprised of differing technologies that when placed together, contain an overall mechanism supporting an organization's automated account management requirements."
        }
      },
      "SV-213901": {
        "describe__deleted": "  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81847"
            ],
            [
              "-",
              "V-67357"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access SQL Server. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies. \n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement. \n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system. \n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems.  If SQL Server does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy."
        }
      },
      "SV-213902": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring the DBMS's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to the DBMS, even where the application connects to the DBMS with a standard, shared account.\n\nIf the computer account of a remote computer is granted access to a SQL Server database, any service or scheduled task running as NT AUTHORITY\\SYSTEM or NT AUTHORITY\\NETWORK SERVICE can log into the instance and perform actions. These actions cannot be traced back to a specific user or process."
        }
      },
      "SV-213903": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message.\n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database. \n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring SQL Server's audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to SQL Server, even where the application connects to SQL Server with a standard, shared account. \n\nApplications should use temporal tables to track the changes and history of sensitive data."
        }
      },
      "SV-213904": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Non-repudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nSQL Server provides the ability for high privileged accounts to impersonate users in a database using the TRUSTWORTHY feature. This will allow members of the fixed database role to impersonate any user within the database."
        }
      },
      "SV-213905": {
        "describe__deleted": "  if input('server_audit_at_database_level_required')\n    impact 0.5\n  else\n    impact 0.0\n    desc 'Inspec attributes has specified that SQL Server Audit is not in use at\n    the database level, this is not applicable (NA)'\n  end\n\n  approved_audit_maintainers = input('approved_audit_maintainers')\n\n  # The query in check-text is assumes the presence of STIG schema as supplied with\n  # the STIG supplemental. The below query ( partially taken from 2016 MSSQL STIG)\n  # will work without STIG supplemental schema.\n\n  query = %{\n    SELECT DPE.PERMISSION_NAME AS 'PERMISSION',\n           DPM.NAME            AS 'ROLE MEMBER',\n           DPR.NAME            AS 'ROLE NAME'\n    FROM   SYS.DATABASE_ROLE_MEMBERS DRM\n           JOIN SYS.DATABASE_PERMISSIONS DPE\n             ON DRM.ROLE_PRINCIPAL_ID = DPE.GRANTEE_PRINCIPAL_ID\n           JOIN SYS.DATABASE_PRINCIPALS DPR\n             ON DRM.ROLE_PRINCIPAL_ID = DPR.PRINCIPAL_ID\n           JOIN SYS.DATABASE_PRINCIPALS DPM\n             ON DRM.MEMBER_PRINCIPAL_ID = DPM.PRINCIPAL_ID\n    WHERE  DPE.PERMISSION_NAME IN ( 'CONTROL', 'ALTER ANY DATABASE AUDIT' )\n    OR DPM.NAME IN ('db_owner')\n  }\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  describe 'List of approved audit maintainers' do\n    subject { sql_session.query(query).column('role member').uniq }\n    it { should match_array approved_audit_maintainers }\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81851"
            ],
            [
              "-",
              "V-67361"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "Inspec attributes has specified that SQL Server Audit is not in use at\n    the database level, this is not applicable (NA)",
          "__new": "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the system's performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "Inspec attributes has specified that SQL Server Audit is not in use at\n    the database level, this is not applicable (NA)"
        }
      },
      "SV-213906": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
        }
      },
      "SV-213907": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "If the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
        }
      },
      "SV-213908": {
        "describe__deleted": "  # The query in check text is assumes the presence of STIG schema as supplied\n  # with the STIG supplemental. The below query ( taken from 2016 MSSQL STIG)\n  # will work without STIG supplemental schema.\n\n  query = %{\n      ;WITH OBJECTS_CTE\n           AS (SELECT O.NAME,\n                      O.TYPE_DESC,\n                      CASE\n                        WHEN O.PRINCIPAL_ID IS NULL THEN S.PRINCIPAL_ID\n                        ELSE O.PRINCIPAL_ID\n                      END AS PRINCIPAL_ID\n               FROM   SYS.OBJECTS O\n                      INNER JOIN SYS.SCHEMAS S\n                              ON O.SCHEMA_ID = S.SCHEMA_ID\n               WHERE  O.IS_MS_SHIPPED = 0)\n      SELECT CTE.NAME,\n             CTE.TYPE_DESC,\n             DP.NAME AS OBJECTOWNER\n      FROM   OBJECTS_CTE CTE\n             INNER JOIN SYS.DATABASE_PRINCIPALS DP\n                     ON CTE.PRINCIPAL_ID = DP.PRINCIPAL_ID\n      ORDER  BY DP.NAME,\n                CTE.NAME\n  }\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  describe \"Authorized users for Database: #{input('db_name')}\" do\n    subject { sql_session.query(query).column('objectowner').uniq }\n    it { should cmp input('authorized_principals') }\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81861"
            ],
            [
              "-",
              "V-67371"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definer's rights. This allows anyone who utilizes the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects in SQL Server rely on unauthorized owner accounts, these objects may be lost when an account is removed."
        }
      },
      "SV-213909": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "If SQL Server were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals shall be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations."
        }
      },
      "SV-213910": {
        "describe__deleted": "  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. In the event of a system failure, SQL Server must be able to bring the database back to a consistent state."
        }
      },
      "SV-213911": {
        "describe__deleted": "  query = %{\n    SELECT\n          COUNT(credential_id) AS count_of_ids\n    FROM\n          [master].sys.master_key_passwords\n  }\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  describe 'Count of `Database Master Key passwords` stored in credentials within the database' do\n    subject { sql_session.query(query).row(0).column('count_of_ids') }\n    its('value') { should cmp 0 }\n  end  ",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Weak passwords may be easily guessed. When passwords are used to encrypt keys used for encryption of sensitive data, then the confidentiality of all data encrypted using that key is at risk."
        }
      },
      "SV-213912": {
        "describe__deleted": "  query = %(\n    SELECT NAME\n    FROM   [master].sys.databases\n    WHERE  is_master_key_encrypted_by_server = 1\n           AND owner_sid <> 1\n           AND state = 0\n           AND name = '#{input('db_name')}';\n  )\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  results = sql_session.query(query)\n\n  if results.empty?\n    impact 0.0\n    desc 'No databases require encryption hence this is not a finding'\n  end\n\n  describe 'The following checks must be performed manually' do\n    skip \"The following checks must be performed manually:\n    For the database #{results.column('name')} verify in the System Security\n    Plan that encryption of the Database Master Key using the Service Master Key\n    is acceptable and approved by the Information Owner, and the encrypted data\n    does not require additional protections to deter or detect DBA access.\n    If not approved, this is a finding.\n\n    If approved and additional protections are required, then verify the additional\n    requirements are in place in accordance with the System Security Plan. These\n    may include additional auditing on access of the Database Master Key with\n    alerts or other automated monitoring.\n\n    If the additional requirements are not in place, this is a finding.\"\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81871"
            ],
            [
              "-",
              "V-67381"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "No databases require encryption hence this is not a finding",
          "__new": "When not encrypted by the Service Master Key, system administrators or application administrators may access and use the Database Master Key to view sensitive data that they are not authorized to view. Where alternate encryption means are not feasible, encryption by the Service Master Key may be necessary. To help protect sensitive data from unauthorized access by DBAs, mitigations may be in order. Mitigations may include automatic alerts or other audit events when the Database Master Key is accessed outside of the application or by a DBA account."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "No databases require encryption hence this is not a finding",
          "check": {
            "__old": "If no databases require encryption, this is not a finding.\n\nFrom the query prompt:\nSELECT name\nFROM [master].sys.databases\nWHERE is_master_key_encrypted_by_server = 1\nAND owner_sid <> 1\nAND state = 0;\n(Note that this query assumes that the [sa] account is not used as the owner of application databases, in keeping with other STIG guidance.  If this is not the case, modify the query accordingly.)\n\nIf no databases are returned by the query, this is not a finding.\n\nFor any databases returned, verify in the System Security Plan that encryption of the Database Master Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding.\n\nIf approved and additional protections are required, then verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring.\n\nIf the additional requirements are not in place, this is a finding.",
            "__new": "If no databases require encryption, this is not a finding. \n\nFrom the query prompt: \n\nSELECT name \nFROM [master].sys.databases \nWHERE is_master_key_encrypted_by_server = 1 \nAND owner_sid <> 1 \nAND state = 0; \n(Note that this query assumes that the [sa] account is not used as the owner of application databases, in keeping with other STIG guidance. If this is not the case, modify the query accordingly.) \n\nIf no databases are returned by the query, this is not a finding. \n\nFor any databases returned, verify in the System Security Plan that encryption of the Database Master Key using the Service Master Key is acceptable and approved by the Information Owner, and the encrypted data does not require additional protections to deter or detect DBA access. If not approved, this is a finding. \n\nIf approved and additional protections are required, then verify the additional requirements are in place in accordance with the System Security Plan. These may include additional auditing on access of the Database Master Key with alerts or other automated monitoring. \n\nIf the additional requirements are not in place, this is a finding."
          },
          "fix": {
            "__old": "Where possible, encrypt the Database Master Key with a password known only to the application administrator.  Where not possible, configure additional audit events or alerts to detect unauthorized access to the Database Master Key by users not authorized to view sensitive data.",
            "__new": "Where possible, encrypt the Database Master Key with a password known only to the application administrator.\n\nWhere not possible, configure additional audit events or alerts to detect unauthorized access to the Database Master Key by users not authorized to view sensitive data."
          }
        }
      },
      "SV-213914": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "An isolation boundary provides access control and protects the integrity of the hardware, software, and firmware that perform security functions. \n\nSecurity functions are the hardware, software, and/or firmware of the information system responsible for enforcing the system security policy and supporting the isolation of code and data on which the protection is based.\n\nDevelopers and implementers can increase the assurance in security functions by employing well-defined security policy models; structured, disciplined, and rigorous hardware and software development techniques; and sound system/security engineering principles. \n\nDatabase Management Systems typically separate security functionality from non-security functionality via separate databases or schemas. Database objects or code implementing security functionality should not be commingled with objects or code implementing application logic. When security and non-security functionality are commingled, users who have access to non-security functionality may be able to access security functionality."
        }
      },
      "SV-213915": {
        "describe__deleted": "  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81879"
            ],
            [
              "-",
              "V-67389"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Applications, including DBMSs, must prevent unauthorized and unintended information transfer via shared system resources. \n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls."
        }
      },
      "SV-213916": {
        "describe__deleted": "  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81881"
            ],
            [
              "-",
              "V-67391"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed, and must document what has been discovered.",
          "check": {
            "__old": "Review DBMS code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.\n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding.\n\nIf column/field definitions are not reflective of the data, this is a finding.\n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding.\n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding.\n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding.",
            "__new": "Review DBMS code (stored procedures, functions, triggers), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input. \n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding. \n\nIf column/field definitions are not reflective of the data, this is a finding. \n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding. \n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding. \n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding."
          }
        }
      },
      "SV-213917": {
        "describe__deleted": "  # The below query was taken from 2016 MSSQL STIG\n\n  query = %{\n    DBCC\n      TRACESTATUS (3625, -1)\n    GO\n    }\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  describe 'TRACEFLAG 3625' do\n    subject { sql_session.query(query).rows[0] }\n    its('status') { should cmp 1 }\n    its('global') { should cmp 1 }\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81887"
            ],
            [
              "-",
              "V-67397"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Any DBMS or associated application providing too much information in error messages on the screen or printout risks compromising the data and security of the system. The structure and content of error messages need to be carefully considered by the organization and development team.\n\nDatabases can inadvertently provide a wealth of information to an attacker through improperly handled error messages. In addition to sensitive business or personal information, database errors can provide host names, IP addresses, user names, and other system information not required for troubleshooting but very useful to someone targeting the system.\n\nCarefully consider the structure/content of error messages. The extent to which information systems are able to identify and handle error conditions is guided by organizational policy and operational requirements. Information that could be exploited by adversaries includes, for example, logon attempts with passwords entered by mistake as the username, mission/business information that can be derived from (if not stated explicitly by) information recorded, and personal information, such as account numbers, social security numbers, and credit card numbers."
        }
      },
      "SV-213918": {
        "describe__deleted": "  if input('security_labeling_required')\n    impact 0.5\n  else\n    impact 0.0\n    desc 'Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable'\n  end\n\n  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81891"
            ],
            [
              "-",
              "V-67401"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable",
          "__new": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable"
        }
      },
      "SV-213919": {
        "describe__deleted": "  if input('security_labeling_required')\n    impact 0.5\n  else\n    impact 0.0\n    desc 'Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable'\n  end\n\n  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81893"
            ],
            [
              "-",
              "V-67403"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable",
          "__new": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy.\n\nOne example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable"
        }
      },
      "SV-213920": {
        "describe__deleted": "  if input('security_labeling_required')\n    impact 0.5\n  else\n    impact 0.0\n    desc 'Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable'\n  end\n  describe 'Test has no automation procedure, checks must be performed manually' do\n    skip 'This check must be performed manually'\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81895"
            ],
            [
              "-",
              "V-67405"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable",
          "__new": "Without the association of security labels to information, there is no basis for SQL Server to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. These labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies; reflect special dissemination, handling, or distribution instructions; or support other aspects of the information security policy. One example includes marking data as classified or FOUO. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of SQL Server, a third-party product, or custom application code."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "Security labeling is stated as `not required` in the attributes file,\n    this control is not applicable"
        }
      },
      "SV-213921": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Discretionary Access Control (DAC) is based on the notion that individual users are \"owners\" of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control."
        }
      },
      "SV-213922": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "In certain situations, to provide required functionality, a DBMS needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be utilized only where necessary and protected from misuse."
        }
      },
      "SV-213923": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nDBMS functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nSQL Server must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect) by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc."
        }
      },
      "SV-213924": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications."
        }
      },
      "SV-213926": {
        "describe__deleted": "  data_at_rest_encryption_required = input('data_at_rest_encryption_required')\n\n  query = %{\n    SELECT\n          d.name AS [Database Name],\n          CASE e.encryption_state\n                WHEN 0 THEN 'No database encryption key present, no encryption'\n                WHEN 1 THEN 'Unencrypted'\n                WHEN 2 THEN 'Encryption in progress'\n                WHEN 3 THEN 'Encrypted'\n                WHEN 4 THEN 'Key change in progress'\n                WHEN 5 THEN 'Decryption in progress'\n                WHEN 6 THEN 'Protection change in progress'\n          END AS [Encryption State]\n    FROM sys.dm_database_encryption_keys e\n    RIGHT JOIN sys.databases d ON DB_NAME(e.database_id) = d.name\n    WHERE d.name IN ('#{input('db_name')}')\n  }\n\n  sql_session = mssql_session(user: input('user'),\n                              password: input('password'),\n                              host: input('host'),\n                              instance: input('instance'),\n                              port: input('port'),\n                              db_name: input('db_name'))\n\n  unless data_at_rest_encryption_required\n    impact 0.0\n    desc 'If the application owner and Authorizing Official have\n    determined that encryption of data at rest is NOT required, this is not a\n    finding.'\n  end\n\n  describe \"Database: #{input('db_name')} encryption state\" do\n    subject { sql_session.query(query).column('encryption state').uniq }\n    it { should cmp 'Encrypted' }\n  end\n\n  describe 'The following checks must be performed manually' do\n    skip \"The following checks must be performed manually:\n      If full-disk encryption is required, and Windows or the storage system is not\n      configured for this, this is a finding.\n\n      If database transparent data encryption (TDE) is called for, check whether it\n      is enabled:\n      In SQL Server Management Studio, Object Explorer, expand the instance and\n      right-click on the database name; select properties.  Select the Options page,\n      State section, Encryption Enabled parameter.\n\n      If the value displayed is False, this is a finding.\n\n      If column encryption, done via SQL Server features, is required, review the\n      definitions and contents of the relevant tables and columns.\n\n      If any of the information defined as requiring cryptographic protection is not\n      encrypted in a manner that provides the required level of protection, this is a\n      finding.\n\n      If table/column encryption and/or a separation between those who own the data\n      (and can view it) and those who manage the data (but should have no access) is\n      required for PII or similar types of data, use Always Encrypted. The details\n      for configuring Always Encrypted are located here:\n      https://msdn.microsoft.com/en-us/library/mt163865.aspx.\n\n      Review the definitions and contents of the relevant tables/columns for the\n      Always Encryption settings, if any of the information defined as requiring\n      cryptographic protection is not encrypted this is a finding.\"\n  end",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          },
          "legacy": [
            [
              "-",
              "SV-81899"
            ],
            [
              "-",
              "V-67409"
            ],
            [
              " "
            ],
            [
              " "
            ]
          ]
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "desc": {
          "__old": "If the application owner and Authorizing Official have\n    determined that encryption of data at rest is NOT required, this is not a\n    finding.",
          "__new": "DBMSs handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to SQL Server or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides."
        },
        "impact": {
          "__old": 0,
          "__new": 0.5
        },
        "descs": {
          "default__deleted": "If the application owner and Authorizing Official have\n    determined that encryption of data at rest is NOT required, this is not a\n    finding."
        }
      },
      "SV-213927": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "SQL Server’s handling data requiring \"data at rest\" protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to SQL Server or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides."
        }
      },
      "SV-251040": {
        "describe__deleted": "",
        "tags": {
          "documentable": {
            "__old": null,
            "__new": false
          }
        },
        "refs": [
          [
            "+",
            "DPMS Target MS SQL Server 2016 Database"
          ]
        ],
        "descs": {
          "default__deleted": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of a DBMS with the encryption devices."
        }
      }
    }
  }
}